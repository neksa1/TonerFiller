
TonerFiller_miSRT_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800200  000020d6  0000216a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c5  0080036e  0080036e  000022d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050fd  00000000  00000000  00002558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001274  00000000  00000000  00007655  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002026  00000000  00000000  000088c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  0000a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b38  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b73  00000000  00000000  0000b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000d52f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	90 c0       	rjmp	.+288    	; 0x126 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c0       	rjmp	.+284    	; 0x126 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c0       	rjmp	.+280    	; 0x126 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c0       	rjmp	.+276    	; 0x126 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c0       	rjmp	.+272    	; 0x126 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c0       	rjmp	.+268    	; 0x126 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c0       	rjmp	.+264    	; 0x126 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c0       	rjmp	.+260    	; 0x126 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c0       	rjmp	.+256    	; 0x126 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c0       	rjmp	.+252    	; 0x126 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c0       	rjmp	.+248    	; 0x126 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c0       	rjmp	.+244    	; 0x126 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c0       	rjmp	.+240    	; 0x126 <__bad_interrupt>
      36:	00 00       	nop
      38:	76 c0       	rjmp	.+236    	; 0x126 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c0       	rjmp	.+232    	; 0x126 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c0       	rjmp	.+228    	; 0x126 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 91 0b 	jmp	0x1722	; 0x1722 <__vector_17>
      48:	6e c0       	rjmp	.+220    	; 0x126 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c0       	rjmp	.+216    	; 0x126 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c0       	rjmp	.+212    	; 0x126 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c0       	rjmp	.+208    	; 0x126 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c0       	rjmp	.+204    	; 0x126 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	64 c0       	rjmp	.+200    	; 0x126 <__bad_interrupt>
      5e:	00 00       	nop
      60:	62 c0       	rjmp	.+196    	; 0x126 <__bad_interrupt>
      62:	00 00       	nop
      64:	60 c0       	rjmp	.+192    	; 0x126 <__bad_interrupt>
      66:	00 00       	nop
      68:	5e c0       	rjmp	.+188    	; 0x126 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5c c0       	rjmp	.+184    	; 0x126 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c0       	rjmp	.+180    	; 0x126 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c0       	rjmp	.+176    	; 0x126 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c0       	rjmp	.+172    	; 0x126 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c0       	rjmp	.+168    	; 0x126 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 a3 0b 	jmp	0x1746	; 0x1746 <__vector_32>
      84:	50 c0       	rjmp	.+160    	; 0x126 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c0       	rjmp	.+156    	; 0x126 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c0       	rjmp	.+148    	; 0x126 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c0       	rjmp	.+144    	; 0x126 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c0       	rjmp	.+140    	; 0x126 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c0       	rjmp	.+136    	; 0x126 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c0       	rjmp	.+132    	; 0x126 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c0       	rjmp	.+128    	; 0x126 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 b5 0b 	jmp	0x176a	; 0x176a <__vector_42>
      ac:	3c c0       	rjmp	.+120    	; 0x126 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c0       	rjmp	.+116    	; 0x126 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c0       	rjmp	.+112    	; 0x126 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c0       	rjmp	.+108    	; 0x126 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c0       	rjmp	.+104    	; 0x126 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c0       	rjmp	.+100    	; 0x126 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c0       	rjmp	.+96     	; 0x126 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c0       	rjmp	.+92     	; 0x126 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c0       	rjmp	.+88     	; 0x126 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c0       	rjmp	.+84     	; 0x126 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c0       	rjmp	.+80     	; 0x126 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c0       	rjmp	.+76     	; 0x126 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c0       	rjmp	.+72     	; 0x126 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c0       	rjmp	.+68     	; 0x126 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 ed       	ldi	r30, 0xD6	; 214
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 36       	cpi	r26, 0x6E	; 110
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	ae e6       	ldi	r26, 0x6E	; 110
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 33       	cpi	r26, 0x33	; 51
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <main>
     122:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <_exit>

00000126 <__bad_interrupt>:
     126:	6c cf       	rjmp	.-296    	; 0x0 <__vectors>

00000128 <X_Axis_Step_Plus_Init>:
			Y_Axis_Step_Minus();
			//_delay_ms(500);
		}
		Lcd4_Clear();
		Lcd4_Set_Cursor(1,0);
		Lcd4_Write_String("Zero Set");
     128:	89 e0       	ldi	r24, 0x09	; 9
     12a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     12e:	88 ef       	ldi	r24, 0xF8	; 248
     130:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     134:	78 94       	sei
     136:	88 9a       	sbi	0x11, 0	; 17
     138:	2f ef       	ldi	r18, 0xFF	; 255
     13a:	88 ef       	ldi	r24, 0xF8	; 248
     13c:	95 e1       	ldi	r25, 0x15	; 21
     13e:	21 50       	subi	r18, 0x01	; 1
     140:	80 40       	sbci	r24, 0x00	; 0
     142:	90 40       	sbci	r25, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <X_Axis_Step_Plus_Init+0x16>
     146:	00 c0       	rjmp	.+0      	; 0x148 <X_Axis_Step_Plus_Init+0x20>
     148:	00 00       	nop
     14a:	f8 94       	cli
     14c:	08 95       	ret

0000014e <Y_Axis_Step_Plus_Init>:
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     154:	88 ef       	ldi	r24, 0xF8	; 248
     156:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     15a:	78 94       	sei
     15c:	8a 9a       	sbi	0x11, 2	; 17
     15e:	2f e7       	ldi	r18, 0x7F	; 127
     160:	8c ef       	ldi	r24, 0xFC	; 252
     162:	9a e0       	ldi	r25, 0x0A	; 10
     164:	21 50       	subi	r18, 0x01	; 1
     166:	80 40       	sbci	r24, 0x00	; 0
     168:	90 40       	sbci	r25, 0x00	; 0
     16a:	e1 f7       	brne	.-8      	; 0x164 <Y_Axis_Step_Plus_Init+0x16>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <Y_Axis_Step_Plus_Init+0x20>
     16e:	00 00       	nop
     170:	f8 94       	cli
     172:	08 95       	ret

00000174 <X_Axis_Step_Plus>:
     174:	89 e0       	ldi	r24, 0x09	; 9
     176:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     17a:	88 ef       	ldi	r24, 0xF8	; 248
     17c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     180:	78 94       	sei
     182:	88 9a       	sbi	0x11, 0	; 17
     184:	2f e7       	ldi	r18, 0x7F	; 127
     186:	87 ed       	ldi	r24, 0xD7	; 215
     188:	95 e2       	ldi	r25, 0x25	; 37
     18a:	21 50       	subi	r18, 0x01	; 1
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	90 40       	sbci	r25, 0x00	; 0
     190:	e1 f7       	brne	.-8      	; 0x18a <X_Axis_Step_Plus+0x16>
     192:	00 c0       	rjmp	.+0      	; 0x194 <X_Axis_Step_Plus+0x20>
     194:	00 00       	nop
     196:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <X>
     19a:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <X+0x1>
     19e:	01 96       	adiw	r24, 0x01	; 1
     1a0:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <X+0x1>
     1a4:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <X>
     1a8:	f8 94       	cli
     1aa:	08 95       	ret

000001ac <X_Axis_Step_Minus>:
     1ac:	89 e0       	ldi	r24, 0x09	; 9
     1ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     1b2:	88 ef       	ldi	r24, 0xF8	; 248
     1b4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     1b8:	78 94       	sei
     1ba:	88 98       	cbi	0x11, 0	; 17
     1bc:	2f e7       	ldi	r18, 0x7F	; 127
     1be:	87 ed       	ldi	r24, 0xD7	; 215
     1c0:	95 e2       	ldi	r25, 0x25	; 37
     1c2:	21 50       	subi	r18, 0x01	; 1
     1c4:	80 40       	sbci	r24, 0x00	; 0
     1c6:	90 40       	sbci	r25, 0x00	; 0
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <X_Axis_Step_Minus+0x16>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <X_Axis_Step_Minus+0x20>
     1cc:	00 00       	nop
     1ce:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <X>
     1d2:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <X+0x1>
     1d6:	01 97       	sbiw	r24, 0x01	; 1
     1d8:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <X+0x1>
     1dc:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <X>
     1e0:	f8 94       	cli
     1e2:	08 95       	ret

000001e4 <Y_Axis_Step_Plus>:
     1e4:	8a e0       	ldi	r24, 0x0A	; 10
     1e6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     1ea:	88 ef       	ldi	r24, 0xF8	; 248
     1ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     1f0:	78 94       	sei
     1f2:	8a 9a       	sbi	0x11, 2	; 17
     1f4:	2f e7       	ldi	r18, 0x7F	; 127
     1f6:	81 e3       	ldi	r24, 0x31	; 49
     1f8:	97 e1       	ldi	r25, 0x17	; 23
     1fa:	21 50       	subi	r18, 0x01	; 1
     1fc:	80 40       	sbci	r24, 0x00	; 0
     1fe:	90 40       	sbci	r25, 0x00	; 0
     200:	e1 f7       	brne	.-8      	; 0x1fa <Y_Axis_Step_Plus+0x16>
     202:	00 c0       	rjmp	.+0      	; 0x204 <Y_Axis_Step_Plus+0x20>
     204:	00 00       	nop
     206:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
     20a:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <__data_end+0x1>
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <__data_end+0x1>
     214:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
     218:	f8 94       	cli
     21a:	08 95       	ret

0000021c <Y_Axis_Step_Minus>:
     21c:	8a e0       	ldi	r24, 0x0A	; 10
     21e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     222:	88 ef       	ldi	r24, 0xF8	; 248
     224:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     228:	78 94       	sei
     22a:	8a 98       	cbi	0x11, 2	; 17
     22c:	2f e7       	ldi	r18, 0x7F	; 127
     22e:	81 e3       	ldi	r24, 0x31	; 49
     230:	97 e1       	ldi	r25, 0x17	; 23
     232:	21 50       	subi	r18, 0x01	; 1
     234:	80 40       	sbci	r24, 0x00	; 0
     236:	90 40       	sbci	r25, 0x00	; 0
     238:	e1 f7       	brne	.-8      	; 0x232 <Y_Axis_Step_Minus+0x16>
     23a:	00 c0       	rjmp	.+0      	; 0x23c <Y_Axis_Step_Minus+0x20>
     23c:	00 00       	nop
     23e:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
     242:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <__data_end+0x1>
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <__data_end+0x1>
     24c:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
     250:	f8 94       	cli
     252:	08 95       	ret

00000254 <Go_To_Zero_Init>:
     254:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <STOP_X>
     258:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <STOP_X+0x1>
     25c:	89 2b       	or	r24, r25
     25e:	39 f4       	brne	.+14     	; 0x26e <Go_To_Zero_Init+0x1a>
     260:	a5 df       	rcall	.-182    	; 0x1ac <X_Axis_Step_Minus>
     262:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <STOP_X>
     266:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <STOP_X+0x1>
     26a:	89 2b       	or	r24, r25
     26c:	c9 f3       	breq	.-14     	; 0x260 <Go_To_Zero_Init+0xc>
     26e:	5c df       	rcall	.-328    	; 0x128 <X_Axis_Step_Plus_Init>
     270:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <STOP_X+0x1>
     274:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <STOP_X>
     278:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <STOP_Y>
     27c:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <STOP_Y+0x1>
     280:	89 2b       	or	r24, r25
     282:	39 f4       	brne	.+14     	; 0x292 <Go_To_Zero_Init+0x3e>
     284:	cb df       	rcall	.-106    	; 0x21c <Y_Axis_Step_Minus>
     286:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <STOP_Y>
     28a:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <STOP_Y+0x1>
     28e:	89 2b       	or	r24, r25
     290:	c9 f3       	breq	.-14     	; 0x284 <Go_To_Zero_Init+0x30>
     292:	5d df       	rcall	.-326    	; 0x14e <Y_Axis_Step_Plus_Init>
     294:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <STOP_Y+0x1>
     298:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <STOP_Y>
     29c:	08 95       	ret

0000029e <X_Axis_Big_Step_Plus>:
     29e:	89 e0       	ldi	r24, 0x09	; 9
     2a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     2a4:	88 ef       	ldi	r24, 0xF8	; 248
     2a6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     2aa:	78 94       	sei
     2ac:	88 9a       	sbi	0x11, 0	; 17
     2ae:	2f ef       	ldi	r18, 0xFF	; 255
     2b0:	8d e2       	ldi	r24, 0x2D	; 45
     2b2:	92 e2       	ldi	r25, 0x22	; 34
     2b4:	21 50       	subi	r18, 0x01	; 1
     2b6:	80 40       	sbci	r24, 0x00	; 0
     2b8:	90 40       	sbci	r25, 0x00	; 0
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <X_Axis_Big_Step_Plus+0x16>
     2bc:	00 c0       	rjmp	.+0      	; 0x2be <X_Axis_Big_Step_Plus+0x20>
     2be:	00 00       	nop
     2c0:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <X>
     2c4:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <X+0x1>
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <X+0x1>
     2ce:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <X>
     2d2:	f8 94       	cli
     2d4:	08 95       	ret

000002d6 <X_Axis_Big_Step_Minus>:
     2d6:	89 e0       	ldi	r24, 0x09	; 9
     2d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     2dc:	88 ef       	ldi	r24, 0xF8	; 248
     2de:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     2e2:	78 94       	sei
     2e4:	88 98       	cbi	0x11, 0	; 17
     2e6:	2f ef       	ldi	r18, 0xFF	; 255
     2e8:	8d e2       	ldi	r24, 0x2D	; 45
     2ea:	92 e2       	ldi	r25, 0x22	; 34
     2ec:	21 50       	subi	r18, 0x01	; 1
     2ee:	80 40       	sbci	r24, 0x00	; 0
     2f0:	90 40       	sbci	r25, 0x00	; 0
     2f2:	e1 f7       	brne	.-8      	; 0x2ec <X_Axis_Big_Step_Minus+0x16>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <X_Axis_Big_Step_Minus+0x20>
     2f6:	00 00       	nop
     2f8:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <X>
     2fc:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <X+0x1>
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	90 93 71 03 	sts	0x0371, r25	; 0x800371 <X+0x1>
     306:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <X>
     30a:	f8 94       	cli
     30c:	08 95       	ret

0000030e <Y_Axis_Big_Step_Plus>:
     30e:	8a e0       	ldi	r24, 0x0A	; 10
     310:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
     314:	88 ef       	ldi	r24, 0xF8	; 248
     316:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
     31a:	78 94       	sei
     31c:	8a 9a       	sbi	0x11, 2	; 17
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	8e e9       	ldi	r24, 0x9E	; 158
     322:	94 e2       	ldi	r25, 0x24	; 36
     324:	21 50       	subi	r18, 0x01	; 1
     326:	80 40       	sbci	r24, 0x00	; 0
     328:	90 40       	sbci	r25, 0x00	; 0
     32a:	e1 f7       	brne	.-8      	; 0x324 <Y_Axis_Big_Step_Plus+0x16>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <Y_Axis_Big_Step_Plus+0x20>
     32e:	00 00       	nop
     330:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
     334:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <__data_end+0x1>
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <__data_end+0x1>
     33e:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
     342:	f8 94       	cli
     344:	08 95       	ret

00000346 <Read_HX711_Right>:
unsigned long Read_HX711_Right(void)
{
	unsigned long count;
	unsigned char i;
	
	HX711_DT_Right |= (1 << PB4);
     346:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     348:	22 e0       	ldi	r18, 0x02	; 2
     34a:	2a 95       	dec	r18
     34c:	f1 f7       	brne	.-4      	; 0x34a <Read_HX711_Right+0x4>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <Read_HX711_Right+0xa>
	_delay_us(1);
	HX711_SCK_Right &= ~(1 << PB0);
     350:	28 98       	cbi	0x05, 0	; 5
     352:	32 e0       	ldi	r19, 0x02	; 2
     354:	3a 95       	dec	r19
     356:	f1 f7       	brne	.-4      	; 0x354 <Read_HX711_Right+0xe>
     358:	00 c0       	rjmp	.+0      	; 0x35a <Read_HX711_Right+0x14>
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Right == 1);
     35a:	85 b1       	in	r24, 0x05	; 5
     35c:	81 30       	cpi	r24, 0x01	; 1
     35e:	e9 f3       	breq	.-6      	; 0x35a <Read_HX711_Right+0x14>
     360:	28 e1       	ldi	r18, 0x18	; 24
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	dc 01       	movw	r26, r24
	for(i=0;i<24;i++)
	{
		//PORTG = 0xFF;
		HX711_SCK_Right |= (1 << PB0);
     368:	28 9a       	sbi	0x05, 0	; 5
     36a:	32 e0       	ldi	r19, 0x02	; 2
     36c:	3a 95       	dec	r19
     36e:	f1 f7       	brne	.-4      	; 0x36c <Read_HX711_Right+0x26>
     370:	00 c0       	rjmp	.+0      	; 0x372 <Read_HX711_Right+0x2c>
		_delay_us(1);
		count=count<<1;
     372:	88 0f       	add	r24, r24
     374:	99 1f       	adc	r25, r25
     376:	aa 1f       	adc	r26, r26
     378:	bb 1f       	adc	r27, r27
		HX711_SCK_Right &= ~(1 << PB0);
     37a:	28 98       	cbi	0x05, 0	; 5
     37c:	32 e0       	ldi	r19, 0x02	; 2
     37e:	3a 95       	dec	r19
     380:	f1 f7       	brne	.-4      	; 0x37e <Read_HX711_Right+0x38>
     382:	00 c0       	rjmp	.+0      	; 0x384 <Read_HX711_Right+0x3e>
		_delay_us(1);
		if(!(bit_is_clear(PINB, PB4)))
     384:	1c 9b       	sbis	0x03, 4	; 3
     386:	03 c0       	rjmp	.+6      	; 0x38e <Read_HX711_Right+0x48>
		{
			//PORTG = 0x00;
			//_delay_ms(500);
			count++;
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	a1 1d       	adc	r26, r1
     38c:	b1 1d       	adc	r27, r1
     38e:	21 50       	subi	r18, 0x01	; 1
	HX711_SCK_Right &= ~(1 << PB0);
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Right == 1);
	for(i=0;i<24;i++)
     390:	59 f7       	brne	.-42     	; 0x368 <Read_HX711_Right+0x22>
			//PORTG = 0x00;
			//_delay_ms(500);
			count++;
		}
	}
	HX711_SCK_Right |= (1 << PB0);
     392:	28 9a       	sbi	0x05, 0	; 5
     394:	22 e0       	ldi	r18, 0x02	; 2
     396:	2a 95       	dec	r18
     398:	f1 f7       	brne	.-4      	; 0x396 <Read_HX711_Right+0x50>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <Read_HX711_Right+0x56>
	count ^= 0x800000;
	_delay_us(1);
	HX711_SCK_Right &= ~(1 << PB0);
     39c:	28 98       	cbi	0x05, 0	; 5
     39e:	32 e0       	ldi	r19, 0x02	; 2
     3a0:	3a 95       	dec	r19
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <Read_HX711_Right+0x5a>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <Read_HX711_Right+0x60>
			//_delay_ms(500);
			count++;
		}
	}
	HX711_SCK_Right |= (1 << PB0);
	count ^= 0x800000;
     3a6:	bc 01       	movw	r22, r24
     3a8:	cd 01       	movw	r24, r26
     3aa:	80 58       	subi	r24, 0x80	; 128
	_delay_us(1);
	HX711_SCK_Right &= ~(1 << PB0);
	_delay_us(1);

	return(count);
}
     3ac:	08 95       	ret

000003ae <Get_Zero_Weight_Right>:
void Get_Zero_Weight_Right()
{
	HX711_Buffer_Right = Read_HX711_Right();
     3ae:	cb df       	rcall	.-106    	; 0x346 <Read_HX711_Right>
     3b0:	60 93 8c 03 	sts	0x038C, r22	; 0x80038c <HX711_Buffer_Right>
     3b4:	70 93 8d 03 	sts	0x038D, r23	; 0x80038d <HX711_Buffer_Right+0x1>
     3b8:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <HX711_Buffer_Right+0x2>
     3bc:	90 93 8f 03 	sts	0x038F, r25	; 0x80038f <HX711_Buffer_Right+0x3>
	Weight_Zero_Right = HX711_Buffer_Right/100;
     3c0:	24 e6       	ldi	r18, 0x64	; 100
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	40 e0       	ldi	r20, 0x00	; 0
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__divmodsi4>
     3cc:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <Weight_Zero_Right>
     3d0:	30 93 89 03 	sts	0x0389, r19	; 0x800389 <Weight_Zero_Right+0x1>
     3d4:	40 93 8a 03 	sts	0x038A, r20	; 0x80038a <Weight_Zero_Right+0x2>
     3d8:	50 93 8b 03 	sts	0x038B, r21	; 0x80038b <Weight_Zero_Right+0x3>
     3dc:	08 95       	ret

000003de <Get_Weight_Right>:
}
unsigned int Get_Weight_Right()
{
     3de:	ef 92       	push	r14
     3e0:	ff 92       	push	r15
     3e2:	0f 93       	push	r16
     3e4:	1f 93       	push	r17
	HX711_Buffer_Right = Read_HX711_Right();
     3e6:	af df       	rcall	.-162    	; 0x346 <Read_HX711_Right>
	HX711_Buffer_Right = HX711_Buffer_Right/100;
     3e8:	24 e6       	ldi	r18, 0x64	; 100
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__divmodsi4>
     3f4:	20 93 8c 03 	sts	0x038C, r18	; 0x80038c <HX711_Buffer_Right>
     3f8:	30 93 8d 03 	sts	0x038D, r19	; 0x80038d <HX711_Buffer_Right+0x1>
     3fc:	40 93 8e 03 	sts	0x038E, r20	; 0x80038e <HX711_Buffer_Right+0x2>
     400:	50 93 8f 03 	sts	0x038F, r21	; 0x80038f <HX711_Buffer_Right+0x3>

	Weight_Right = HX711_Buffer_Right;
	Weight_Right = (Weight_Right - Weight_Zero_Right);// -1.6764 Rade's constant (variable to grams)
     404:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <Weight_Zero_Right>
     408:	90 91 89 03 	lds	r25, 0x0389	; 0x800389 <Weight_Zero_Right+0x1>
     40c:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <Weight_Zero_Right+0x2>
     410:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <Weight_Zero_Right+0x3>
     414:	79 01       	movw	r14, r18
     416:	8a 01       	movw	r16, r20
     418:	e8 1a       	sub	r14, r24
     41a:	f9 0a       	sbc	r15, r25
     41c:	0a 0b       	sbc	r16, r26
     41e:	1b 0b       	sbc	r17, r27
     420:	c8 01       	movw	r24, r16
     422:	b7 01       	movw	r22, r14
	Weight_Right = (unsigned int)(((float)Weight_Right/7.35+0.05)*(-1.6764));
     424:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__floatsisf>
     428:	23 e3       	ldi	r18, 0x33	; 51
     42a:	33 e3       	ldi	r19, 0x33	; 51
     42c:	4b ee       	ldi	r20, 0xEB	; 235
     42e:	50 e4       	ldi	r21, 0x40	; 64
     430:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__divsf3>
     434:	2d ec       	ldi	r18, 0xCD	; 205
     436:	3c ec       	ldi	r19, 0xCC	; 204
     438:	4c e4       	ldi	r20, 0x4C	; 76
     43a:	5d e3       	ldi	r21, 0x3D	; 61
     43c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__addsf3>
     440:	26 e4       	ldi	r18, 0x46	; 70
     442:	34 e9       	ldi	r19, 0x94	; 148
     444:	46 ed       	ldi	r20, 0xD6	; 214
     446:	5f eb       	ldi	r21, 0xBF	; 191
     448:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     44c:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fixunssfsi>
     450:	8b 01       	movw	r16, r22
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	00 93 84 03 	sts	0x0384, r16	; 0x800384 <Weight_Right>
     45a:	10 93 85 03 	sts	0x0385, r17	; 0x800385 <Weight_Right+0x1>
     45e:	20 93 86 03 	sts	0x0386, r18	; 0x800386 <Weight_Right+0x2>
     462:	30 93 87 03 	sts	0x0387, r19	; 0x800387 <Weight_Right+0x3>
	//1083 bez opterecenja
	return Weight_Right;
}
     466:	cb 01       	movw	r24, r22
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	ff 90       	pop	r15
     46e:	ef 90       	pop	r14
     470:	08 95       	ret

00000472 <Read_HX711_Left>:
unsigned long Read_HX711_Left(void)
{
	unsigned long count;
	unsigned char i;
	
	HX711_DT_Left |= (1 << PE1); //HX711_DT_Left |= (1 << PL1);
     472:	71 9a       	sbi	0x0e, 1	; 14
     474:	22 e0       	ldi	r18, 0x02	; 2
     476:	2a 95       	dec	r18
     478:	f1 f7       	brne	.-4      	; 0x476 <Read_HX711_Left+0x4>
     47a:	00 c0       	rjmp	.+0      	; 0x47c <Read_HX711_Left+0xa>
	_delay_us(1);
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
     47c:	70 98       	cbi	0x0e, 0	; 14
     47e:	32 e0       	ldi	r19, 0x02	; 2
     480:	3a 95       	dec	r19
     482:	f1 f7       	brne	.-4      	; 0x480 <Read_HX711_Left+0xe>
     484:	00 c0       	rjmp	.+0      	; 0x486 <Read_HX711_Left+0x14>
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Left == 1); //PORTL HX711_DT_Left == 1
     486:	8e b1       	in	r24, 0x0e	; 14
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	e9 f3       	breq	.-6      	; 0x486 <Read_HX711_Left+0x14>
     48c:	28 e1       	ldi	r18, 0x18	; 24
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	dc 01       	movw	r26, r24
	for(i=0;i<24;i++)
	{
		//PORTG = 0xFF;
		HX711_SCK_Left |= (1 << PE0); //HX711_SCK_Left |= (1 << PL0);
     494:	70 9a       	sbi	0x0e, 0	; 14
     496:	32 e0       	ldi	r19, 0x02	; 2
     498:	3a 95       	dec	r19
     49a:	f1 f7       	brne	.-4      	; 0x498 <Read_HX711_Left+0x26>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <Read_HX711_Left+0x2c>
		_delay_us(1);
		count=count<<1;
     49e:	88 0f       	add	r24, r24
     4a0:	99 1f       	adc	r25, r25
     4a2:	aa 1f       	adc	r26, r26
     4a4:	bb 1f       	adc	r27, r27
		HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
     4a6:	70 98       	cbi	0x0e, 0	; 14
     4a8:	32 e0       	ldi	r19, 0x02	; 2
     4aa:	3a 95       	dec	r19
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <Read_HX711_Left+0x38>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <Read_HX711_Left+0x3e>
		_delay_us(1);
		if(!(bit_is_clear(PINE, PE1)))
     4b0:	61 9b       	sbis	0x0c, 1	; 12
     4b2:	03 c0       	rjmp	.+6      	; 0x4ba <Read_HX711_Left+0x48>
		{
			count++;
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	a1 1d       	adc	r26, r1
     4b8:	b1 1d       	adc	r27, r1
     4ba:	21 50       	subi	r18, 0x01	; 1
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
	_delay_us(1);
	
	count=0;
	while(HX711_DT_Left == 1); //PORTL HX711_DT_Left == 1
	for(i=0;i<24;i++)
     4bc:	59 f7       	brne	.-42     	; 0x494 <Read_HX711_Left+0x22>
		if(!(bit_is_clear(PINE, PE1)))
		{
			count++;
		}
	}
	HX711_SCK_Left |= (1 << PE0); //HX711_SCK_Left |= (1 << PL0);
     4be:	70 9a       	sbi	0x0e, 0	; 14
     4c0:	22 e0       	ldi	r18, 0x02	; 2
     4c2:	2a 95       	dec	r18
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <Read_HX711_Left+0x50>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <Read_HX711_Left+0x56>
	count ^= 0x800000;
	_delay_us(1);
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
     4c8:	70 98       	cbi	0x0e, 0	; 14
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	3a 95       	dec	r19
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <Read_HX711_Left+0x5a>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <Read_HX711_Left+0x60>
		{
			count++;
		}
	}
	HX711_SCK_Left |= (1 << PE0); //HX711_SCK_Left |= (1 << PL0);
	count ^= 0x800000;
     4d2:	bc 01       	movw	r22, r24
     4d4:	cd 01       	movw	r24, r26
     4d6:	80 58       	subi	r24, 0x80	; 128
	_delay_us(1);
	HX711_SCK_Left &= ~(1 << PE0); //HX711_SCK_Left &= ~(1 << PL0);
	_delay_us(1);

	return(count);
}
     4d8:	08 95       	ret

000004da <Get_Zero_Weight_Left>:
void Get_Zero_Weight_Left()
{
	HX711_Buffer_Left = Read_HX711_Left();
     4da:	cb df       	rcall	.-106    	; 0x472 <Read_HX711_Left>
     4dc:	60 93 80 03 	sts	0x0380, r22	; 0x800380 <HX711_Buffer_Left>
     4e0:	70 93 81 03 	sts	0x0381, r23	; 0x800381 <HX711_Buffer_Left+0x1>
     4e4:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <HX711_Buffer_Left+0x2>
     4e8:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <HX711_Buffer_Left+0x3>
	Weight_Zero_Left = HX711_Buffer_Left/100;
     4ec:	24 e6       	ldi	r18, 0x64	; 100
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	40 e0       	ldi	r20, 0x00	; 0
     4f2:	50 e0       	ldi	r21, 0x00	; 0
     4f4:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__divmodsi4>
     4f8:	20 93 7c 03 	sts	0x037C, r18	; 0x80037c <Weight_Zero_Left>
     4fc:	30 93 7d 03 	sts	0x037D, r19	; 0x80037d <Weight_Zero_Left+0x1>
     500:	40 93 7e 03 	sts	0x037E, r20	; 0x80037e <Weight_Zero_Left+0x2>
     504:	50 93 7f 03 	sts	0x037F, r21	; 0x80037f <Weight_Zero_Left+0x3>
     508:	08 95       	ret

0000050a <Get_Weight_Left>:
	//Weight_Zero_Left = (unsigned int)(((float)Weight_Zero_Left/7.35+0.05)*(-1.6168));
}
unsigned int Get_Weight_Left()
{
     50a:	ef 92       	push	r14
     50c:	ff 92       	push	r15
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
	unsigned  MyWeight [16];
	HX711_Buffer_Left = Read_HX711_Left();
     512:	af df       	rcall	.-162    	; 0x472 <Read_HX711_Left>
	HX711_Buffer_Left = HX711_Buffer_Left/100;
     514:	24 e6       	ldi	r18, 0x64	; 100
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__divmodsi4>
     520:	20 93 80 03 	sts	0x0380, r18	; 0x800380 <HX711_Buffer_Left>
     524:	30 93 81 03 	sts	0x0381, r19	; 0x800381 <HX711_Buffer_Left+0x1>
     528:	40 93 82 03 	sts	0x0382, r20	; 0x800382 <HX711_Buffer_Left+0x2>
     52c:	50 93 83 03 	sts	0x0383, r21	; 0x800383 <HX711_Buffer_Left+0x3>

	Weight_Left = HX711_Buffer_Left;
	Weight_Left = (Weight_Left - Weight_Zero_Left);// -1.6168 Rade's constant (variable to grams)
     530:	80 91 7c 03 	lds	r24, 0x037C	; 0x80037c <Weight_Zero_Left>
     534:	90 91 7d 03 	lds	r25, 0x037D	; 0x80037d <Weight_Zero_Left+0x1>
     538:	a0 91 7e 03 	lds	r26, 0x037E	; 0x80037e <Weight_Zero_Left+0x2>
     53c:	b0 91 7f 03 	lds	r27, 0x037F	; 0x80037f <Weight_Zero_Left+0x3>
     540:	79 01       	movw	r14, r18
     542:	8a 01       	movw	r16, r20
     544:	e8 1a       	sub	r14, r24
     546:	f9 0a       	sbc	r15, r25
     548:	0a 0b       	sbc	r16, r26
     54a:	1b 0b       	sbc	r17, r27
     54c:	c8 01       	movw	r24, r16
     54e:	b7 01       	movw	r22, r14
	Weight_Left = (unsigned int)(((float)Weight_Left/7.35+0.05)*(-1.6168));
     550:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__floatsisf>
     554:	23 e3       	ldi	r18, 0x33	; 51
     556:	33 e3       	ldi	r19, 0x33	; 51
     558:	4b ee       	ldi	r20, 0xEB	; 235
     55a:	50 e4       	ldi	r21, 0x40	; 64
     55c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__divsf3>
     560:	2d ec       	ldi	r18, 0xCD	; 205
     562:	3c ec       	ldi	r19, 0xCC	; 204
     564:	4c e4       	ldi	r20, 0x4C	; 76
     566:	5d e3       	ldi	r21, 0x3D	; 61
     568:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__addsf3>
     56c:	2d e4       	ldi	r18, 0x4D	; 77
     56e:	33 ef       	ldi	r19, 0xF3	; 243
     570:	4e ec       	ldi	r20, 0xCE	; 206
     572:	5f eb       	ldi	r21, 0xBF	; 191
     574:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__mulsf3>
     578:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__fixunssfsi>
     57c:	8b 01       	movw	r16, r22
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	00 93 78 03 	sts	0x0378, r16	; 0x800378 <Weight_Left>
     586:	10 93 79 03 	sts	0x0379, r17	; 0x800379 <Weight_Left+0x1>
     58a:	20 93 7a 03 	sts	0x037A, r18	; 0x80037a <Weight_Left+0x2>
     58e:	30 93 7b 03 	sts	0x037B, r19	; 0x80037b <Weight_Left+0x3>
	
	return Weight_Left;
}  
     592:	cb 01       	movw	r24, r22
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	08 95       	ret

0000059e <FillHalf>:

void FillHalf()
{
     59e:	ff 92       	push	r15
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
	PORTK = (1<<PK5);// Open AIR
     5a8:	80 e2       	ldi	r24, 0x20	; 32
     5aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	
	Get_Zero_Weight_Left();
     5ae:	95 df       	rcall	.-214    	; 0x4da <Get_Zero_Weight_Left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b0:	2f ef       	ldi	r18, 0xFF	; 255
     5b2:	82 e5       	ldi	r24, 0x52	; 82
     5b4:	97 e0       	ldi	r25, 0x07	; 7
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	80 40       	sbci	r24, 0x00	; 0
     5ba:	90 40       	sbci	r25, 0x00	; 0
     5bc:	e1 f7       	brne	.-8      	; 0x5b6 <FillHalf+0x18>
     5be:	00 c0       	rjmp	.+0      	; 0x5c0 <FillHalf+0x22>
     5c0:	00 00       	nop
     5c2:	ef ef       	ldi	r30, 0xFF	; 255
     5c4:	f5 ea       	ldi	r31, 0xA5	; 165
     5c6:	2e e0       	ldi	r18, 0x0E	; 14
     5c8:	e1 50       	subi	r30, 0x01	; 1
     5ca:	f0 40       	sbci	r31, 0x00	; 0
     5cc:	20 40       	sbci	r18, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <FillHalf+0x2a>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <FillHalf+0x34>
     5d2:	00 00       	nop
	
	//////OVO MORA
	_delay_ms(600);//?????????????????????????????????????????????????????????????????????
	for(int i=0;i<2;i++)
	{
		Global_Weight_Left = Get_Weight_Left();
     5d4:	9a df       	rcall	.-204    	; 0x50a <Get_Weight_Left>
     5d6:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <Global_Weight_Left+0x1>
     5da:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <Global_Weight_Left>
     5de:	8f e7       	ldi	r24, 0x7F	; 127
     5e0:	99 ea       	ldi	r25, 0xA9	; 169
     5e2:	e3 e0       	ldi	r30, 0x03	; 3
     5e4:	81 50       	subi	r24, 0x01	; 1
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	e0 40       	sbci	r30, 0x00	; 0
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <FillHalf+0x46>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <FillHalf+0x50>
     5ee:	00 00       	nop
     5f0:	8c df       	rcall	.-232    	; 0x50a <Get_Weight_Left>
     5f2:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <Global_Weight_Left+0x1>
     5f6:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <Global_Weight_Left>
     5fa:	ff e7       	ldi	r31, 0x7F	; 127
     5fc:	29 ea       	ldi	r18, 0xA9	; 169
     5fe:	83 e0       	ldi	r24, 0x03	; 3
     600:	f1 50       	subi	r31, 0x01	; 1
     602:	20 40       	sbci	r18, 0x00	; 0
     604:	80 40       	sbci	r24, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <FillHalf+0x62>
     608:	00 c0       	rjmp	.+0      	; 0x60a <FillHalf+0x6c>
     60a:	00 00       	nop
     60c:	ef e1       	ldi	r30, 0x1F	; 31
     60e:	fe e4       	ldi	r31, 0x4E	; 78
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	f1 f7       	brne	.-4      	; 0x610 <FillHalf+0x72>
     614:	00 c0       	rjmp	.+0      	; 0x616 <FillHalf+0x78>
     616:	00 00       	nop
	//for(int i=0;i<2;i++)
	//{
	//	Global_Weight_Right = Get_Weight_Right();
	//	_delay_ms(150);
	//}
	int Init_Grams_Left  = Global_Weight_Left;
     618:	c0 91 e6 03 	lds	r28, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     61c:	d0 91 e7 03 	lds	r29, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
	//int Init_Grams_Right  = Global_Weight_Right;
	
	char tempValve = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while (abs(Global_Weight_Left-Init_Grams_Left) < Grams)//Grams
     620:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <Grams>
     624:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <Grams+0x1>
     628:	18 16       	cp	r1, r24
     62a:	19 06       	cpc	r1, r25
     62c:	0c f4       	brge	.+2      	; 0x630 <FillHalf+0x92>
     62e:	b0 c0       	rjmp	.+352    	; 0x790 <FillHalf+0x1f2>
     630:	30 c0       	rjmp	.+96     	; 0x692 <FillHalf+0xf4>
	{
		if (tempValve == 0)
		{
			PORTK = (1<<PK4) | (1<<PK5) | (0<<PK7);// Open Valve
		}
		if ((Global_Weight_Left-Init_Grams_Left) >= Grams)
     632:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     636:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
     63a:	8c 1b       	sub	r24, r28
     63c:	9d 0b       	sbc	r25, r29
     63e:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <Grams>
     642:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <Grams+0x1>
     646:	82 17       	cp	r24, r18
     648:	93 07       	cpc	r25, r19
     64a:	14 f0       	brlt	.+4      	; 0x650 <FillHalf+0xb2>
		{
			PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);
     64c:	f8 01       	movw	r30, r16
     64e:	f0 82       	st	Z, r15
		//{
		//	PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
		//}
		tempValve = 1;
			
		Global_Weight_Left = Get_Weight_Left();
     650:	5c df       	rcall	.-328    	; 0x50a <Get_Weight_Left>
     652:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <Global_Weight_Left+0x1>
     656:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <Global_Weight_Left>
     65a:	ff e7       	ldi	r31, 0x7F	; 127
     65c:	2f ea       	ldi	r18, 0xAF	; 175
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	f1 50       	subi	r31, 0x01	; 1
     662:	20 40       	sbci	r18, 0x00	; 0
     664:	80 40       	sbci	r24, 0x00	; 0
     666:	e1 f7       	brne	.-8      	; 0x660 <FillHalf+0xc2>
     668:	00 c0       	rjmp	.+0      	; 0x66a <FillHalf+0xcc>
     66a:	00 00       	nop
	int Init_Grams_Left  = Global_Weight_Left;
	//int Init_Grams_Right  = Global_Weight_Right;
	
	char tempValve = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while (abs(Global_Weight_Left-Init_Grams_Left) < Grams)//Grams
     66c:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     670:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
     674:	8c 1b       	sub	r24, r28
     676:	9d 0b       	sbc	r25, r29
     678:	9c 01       	movw	r18, r24
     67a:	22 f4       	brpl	.+8      	; 0x684 <FillHalf+0xe6>
     67c:	22 27       	eor	r18, r18
     67e:	33 27       	eor	r19, r19
     680:	28 1b       	sub	r18, r24
     682:	39 0b       	sbc	r19, r25
     684:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <Grams>
     688:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <Grams+0x1>
     68c:	28 17       	cp	r18, r24
     68e:	39 07       	cpc	r19, r25
     690:	84 f2       	brlt	.-96     	; 0x632 <FillHalf+0x94>
		Global_Weight_Left = Get_Weight_Left();
		//_delay_ms(10);
		//Global_Weight_Right = Get_Weight_Right();
		_delay_ms(110);
	}
	PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);// Close Valve
     692:	80 e2       	ldi	r24, 0x20	; 32
     694:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	int oldSum_L = Sum_L;
	//int oldSum_R = Sum_R;
	
	tempValve = 0;
	
	Sum_L = Sum_L + abs(Global_Weight_Left-Init_Grams_Left);
     698:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     69c:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
     6a0:	8c 1b       	sub	r24, r28
     6a2:	9d 0b       	sbc	r25, r29
     6a4:	ac 01       	movw	r20, r24
     6a6:	22 f4       	brpl	.+8      	; 0x6b0 <FillHalf+0x112>
     6a8:	44 27       	eor	r20, r20
     6aa:	55 27       	eor	r21, r21
     6ac:	48 1b       	sub	r20, r24
     6ae:	59 0b       	sbc	r21, r25
     6b0:	20 91 e2 03 	lds	r18, 0x03E2	; 0x8003e2 <Sum_L>
     6b4:	30 91 e3 03 	lds	r19, 0x03E3	; 0x8003e3 <Sum_L+0x1>
     6b8:	24 0f       	add	r18, r20
     6ba:	35 1f       	adc	r19, r21
     6bc:	30 93 e3 03 	sts	0x03E3, r19	; 0x8003e3 <Sum_L+0x1>
     6c0:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <Sum_L>
	//Sum_R = Sum_R + abs(Global_Weight_Right-Init_Grams_Right);
	
	if (Sum_L - oldSum_L > Grams + 50 || Global_Weight_Left - Init_Grams_Left > Grams + 2//4
     6c4:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <Grams>
     6c8:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <Grams+0x1>
     6cc:	b9 01       	movw	r22, r18
     6ce:	6e 5c       	subi	r22, 0xCE	; 206
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	64 17       	cp	r22, r20
     6d4:	75 07       	cpc	r23, r21
     6d6:	5c f0       	brlt	.+22     	; 0x6ee <FillHalf+0x150>
     6d8:	a9 01       	movw	r20, r18
     6da:	4e 5f       	subi	r20, 0xFE	; 254
     6dc:	5f 4f       	sbci	r21, 0xFF	; 255
     6de:	48 17       	cp	r20, r24
     6e0:	59 07       	cpc	r21, r25
     6e2:	2c f0       	brlt	.+10     	; 0x6ee <FillHalf+0x150>
									  || Global_Weight_Left - Init_Grams_Left < Grams - 2)//4
     6e4:	22 50       	subi	r18, 0x02	; 2
     6e6:	31 09       	sbc	r19, r1
     6e8:	82 17       	cp	r24, r18
     6ea:	93 07       	cpc	r25, r19
     6ec:	3c f5       	brge	.+78     	; 0x73c <FillHalf+0x19e>
	{
		Lcd4_Clear();
     6ee:	88 d7       	rcall	.+3856   	; 0x1600 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	88 d7       	rcall	.+3856   	; 0x160a <Lcd4_Set_Cursor>
		Lcd4_Write_String("Sum overflow L");
     6fa:	8d e1       	ldi	r24, 0x1D	; 29
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	0e 94 83 0b 	call	0x1706	; 0x1706 <Lcd4_Write_String>
     702:	9f ef       	ldi	r25, 0xFF	; 255
     704:	e3 ed       	ldi	r30, 0xD3	; 211
     706:	f0 e3       	ldi	r31, 0x30	; 48
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	e0 40       	sbci	r30, 0x00	; 0
     70c:	f0 40       	sbci	r31, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <FillHalf+0x16a>
     710:	00 c0       	rjmp	.+0      	; 0x712 <FillHalf+0x174>
     712:	00 00       	nop
		_delay_ms(2000);
		errorFill_L[countErrors_L] = countFill;
     714:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <countErrors_L>
     718:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <countErrors_L+0x1>
     71c:	fc 01       	movw	r30, r24
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	e8 54       	subi	r30, 0x48	; 72
     724:	fc 4f       	sbci	r31, 0xFC	; 252
     726:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <countFill>
     72a:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <countFill+0x1>
     72e:	31 83       	std	Z+1, r19	; 0x01
     730:	20 83       	st	Z, r18
		countErrors_L++;
     732:	01 96       	adiw	r24, 0x01	; 1
     734:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <countErrors_L+0x1>
     738:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <countErrors_L>
     73c:	8f e1       	ldi	r24, 0x1F	; 31
     73e:	9e e4       	ldi	r25, 0x4E	; 78
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <FillHalf+0x1a2>
     744:	00 c0       	rjmp	.+0      	; 0x746 <FillHalf+0x1a8>
     746:	00 00       	nop
	//	Lcd4_Write_String("Sum overflow R");
	//	_delay_ms(2000);
	//	errorFill_R[countErrors_R] = countFill;
	//	countErrors_R++;
	//}
	countFill++;
     748:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countFill>
     74c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countFill+0x1>
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countFill+0x1>
     756:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countFill>
     75a:	ef e1       	ldi	r30, 0x1F	; 31
     75c:	fe e4       	ldi	r31, 0x4E	; 78
     75e:	31 97       	sbiw	r30, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <FillHalf+0x1c0>
     762:	00 c0       	rjmp	.+0      	; 0x764 <FillHalf+0x1c6>
     764:	00 00       	nop
	_delay_ms(10);
	
	Lcd4_Clear();
     766:	4c d7       	rcall	.+3736   	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     768:	60 e0       	ldi	r22, 0x00	; 0
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	4c d7       	rcall	.+3736   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Fill Complete");
     772:	8c e2       	ldi	r24, 0x2C	; 44
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	c7 d7       	rcall	.+3982   	; 0x1706 <Lcd4_Write_String>
     778:	ff ef       	ldi	r31, 0xFF	; 255
     77a:	29 e6       	ldi	r18, 0x69	; 105
     77c:	88 e1       	ldi	r24, 0x18	; 24
     77e:	f1 50       	subi	r31, 0x01	; 1
     780:	20 40       	sbci	r18, 0x00	; 0
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <FillHalf+0x1e0>
     786:	00 c0       	rjmp	.+0      	; 0x788 <FillHalf+0x1ea>
     788:	00 00       	nop
	_delay_ms(1000);
	PORTK = (0<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
     78a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
     78e:	09 c0       	rjmp	.+18     	; 0x7a2 <FillHalf+0x204>
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while (abs(Global_Weight_Left-Init_Grams_Left) < Grams)//Grams
	{
		if (tempValve == 0)
		{
			PORTK = (1<<PK4) | (1<<PK5) | (0<<PK7);// Open Valve
     790:	80 e3       	ldi	r24, 0x30	; 48
     792:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
		}
		if ((Global_Weight_Left-Init_Grams_Left) >= Grams)
		{
			PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);
     796:	08 e0       	ldi	r16, 0x08	; 8
     798:	11 e0       	ldi	r17, 0x01	; 1
     79a:	68 94       	set
     79c:	ff 24       	eor	r15, r15
     79e:	f5 f8       	bld	r15, 5
     7a0:	48 cf       	rjmp	.-368    	; 0x632 <FillHalf+0x94>
	Lcd4_Clear();
	Lcd4_Set_Cursor(1,0);
	Lcd4_Write_String("Fill Complete");
	_delay_ms(1000);
	PORTK = (0<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	08 95       	ret

000007ae <Fill>:
void Fill()
{ 
     7ae:	9f 92       	push	r9
     7b0:	af 92       	push	r10
     7b2:	bf 92       	push	r11
     7b4:	cf 92       	push	r12
     7b6:	df 92       	push	r13
     7b8:	ef 92       	push	r14
     7ba:	ff 92       	push	r15
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
	// |= (1 << PB4);
	// &= ~(1 << PB0);
	//PORTK = (1<<PK5);// Open AIR
	PORTK |= (1<<PK5);
     7c4:	e8 e0       	ldi	r30, 0x08	; 8
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	80 81       	ld	r24, Z
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	80 83       	st	Z, r24
	
	Get_Zero_Weight_Left();
     7ce:	85 de       	rcall	.-758    	; 0x4da <Get_Zero_Weight_Left>
     7d0:	8f e1       	ldi	r24, 0x1F	; 31
     7d2:	9e e4       	ldi	r25, 0x4E	; 78
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	f1 f7       	brne	.-4      	; 0x7d4 <Fill+0x26>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <Fill+0x2c>
     7da:	00 00       	nop
	_delay_ms(10);
	Get_Zero_Weight_Right();
     7dc:	e8 dd       	rcall	.-1072   	; 0x3ae <Get_Zero_Weight_Right>
     7de:	8f e1       	ldi	r24, 0x1F	; 31
     7e0:	9e e4       	ldi	r25, 0x4E	; 78
     7e2:	01 97       	sbiw	r24, 0x01	; 1
     7e4:	f1 f7       	brne	.-4      	; 0x7e2 <Fill+0x34>
     7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <Fill+0x3a>
     7e8:	00 00       	nop
     7ea:	9f ef       	ldi	r25, 0xFF	; 255
     7ec:	20 e7       	ldi	r18, 0x70	; 112
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	91 50       	subi	r25, 0x01	; 1
     7f2:	20 40       	sbci	r18, 0x00	; 0
     7f4:	80 40       	sbci	r24, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <Fill+0x42>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <Fill+0x4c>
     7fa:	00 00       	nop
     7fc:	c3 e0       	ldi	r28, 0x03	; 3
     7fe:	d0 e0       	ldi	r29, 0x00	; 0
	
	//////OVO MORA 
	_delay_ms(100);//600
	for(int i=0;i<3;i++)
	{
	  Global_Weight_Left = Get_Weight_Left();
     800:	84 de       	rcall	.-760    	; 0x50a <Get_Weight_Left>
     802:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <Global_Weight_Left+0x1>
     806:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <Global_Weight_Left>
     80a:	9f ef       	ldi	r25, 0xFF	; 255
     80c:	22 e5       	ldi	r18, 0x52	; 82
     80e:	87 e0       	ldi	r24, 0x07	; 7
     810:	91 50       	subi	r25, 0x01	; 1
     812:	20 40       	sbci	r18, 0x00	; 0
     814:	80 40       	sbci	r24, 0x00	; 0
     816:	e1 f7       	brne	.-8      	; 0x810 <Fill+0x62>
     818:	00 c0       	rjmp	.+0      	; 0x81a <Fill+0x6c>
     81a:	00 00       	nop
     81c:	21 97       	sbiw	r28, 0x01	; 1
	
	//Lcd4_Clear();
	
	//////OVO MORA 
	_delay_ms(100);//600
	for(int i=0;i<3;i++)
     81e:	81 f7       	brne	.-32     	; 0x800 <Fill+0x52>
     820:	8f e1       	ldi	r24, 0x1F	; 31
     822:	9e e4       	ldi	r25, 0x4E	; 78
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <Fill+0x76>
     828:	00 c0       	rjmp	.+0      	; 0x82a <Fill+0x7c>
     82a:	00 00       	nop
     82c:	c3 e0       	ldi	r28, 0x03	; 3
     82e:	d0 e0       	ldi	r29, 0x00	; 0
	  _delay_ms(300);
	}
	_delay_ms(10);
	for(int i=0;i<3;i++)
	{
		Global_Weight_Right = Get_Weight_Right();
     830:	d6 dd       	rcall	.-1108   	; 0x3de <Get_Weight_Right>
     832:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <Global_Weight_Right+0x1>
     836:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <Global_Weight_Right>
     83a:	9f e7       	ldi	r25, 0x7F	; 127
     83c:	29 ea       	ldi	r18, 0xA9	; 169
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	91 50       	subi	r25, 0x01	; 1
     842:	20 40       	sbci	r18, 0x00	; 0
     844:	80 40       	sbci	r24, 0x00	; 0
     846:	e1 f7       	brne	.-8      	; 0x840 <Fill+0x92>
     848:	00 c0       	rjmp	.+0      	; 0x84a <Fill+0x9c>
     84a:	00 00       	nop
     84c:	21 97       	sbiw	r28, 0x01	; 1
	{
	  Global_Weight_Left = Get_Weight_Left();
	  _delay_ms(300);
	}
	_delay_ms(10);
	for(int i=0;i<3;i++)
     84e:	81 f7       	brne	.-32     	; 0x830 <Fill+0x82>
	{
		Global_Weight_Right = Get_Weight_Right();
		_delay_ms(150);
	}  
	int Init_Grams_Left  = Global_Weight_Left;  
     850:	00 91 e6 03 	lds	r16, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     854:	10 91 e7 03 	lds	r17, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
	int Init_Grams_Right  = Global_Weight_Right;
     858:	a0 90 e4 03 	lds	r10, 0x03E4	; 0x8003e4 <Global_Weight_Right>
     85c:	b0 90 e5 03 	lds	r11, 0x03E5	; 0x8003e5 <Global_Weight_Right+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     860:	4a e0       	ldi	r20, 0x0A	; 10
     862:	63 ef       	ldi	r22, 0xF3	; 243
     864:	73 e0       	ldi	r23, 0x03	; 3
     866:	c8 01       	movw	r24, r16
     868:	0e 94 36 10 	call	0x206c	; 0x206c <__itoa_ncheck>
     86c:	8f e1       	ldi	r24, 0x1F	; 31
     86e:	9e e4       	ldi	r25, 0x4E	; 78
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	f1 f7       	brne	.-4      	; 0x870 <Fill+0xc2>
     874:	00 c0       	rjmp	.+0      	; 0x876 <Fill+0xc8>
     876:	00 00       	nop
     878:	4a e0       	ldi	r20, 0x0A	; 10
     87a:	6b ef       	ldi	r22, 0xFB	; 251
     87c:	73 e0       	ldi	r23, 0x03	; 3
     87e:	c5 01       	movw	r24, r10
     880:	0e 94 36 10 	call	0x206c	; 0x206c <__itoa_ncheck>
	
	itoa(Init_Grams_Left, MyWeight, 10);
	_delay_ms(10);
	itoa(Init_Grams_Right, MyWeight2, 10);
	Lcd4_Clear();
     884:	bd d6       	rcall	.+3450   	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	bd d6       	rcall	.+3450   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String(MyWeight);
     890:	83 ef       	ldi	r24, 0xF3	; 243
     892:	93 e0       	ldi	r25, 0x03	; 3
     894:	38 d7       	rcall	.+3696   	; 0x1706 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	82 e0       	ldi	r24, 0x02	; 2
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	b5 d6       	rcall	.+3434   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String(MyWeight2);
     8a0:	8b ef       	ldi	r24, 0xFB	; 251
     8a2:	93 e0       	ldi	r25, 0x03	; 3
     8a4:	30 d7       	rcall	.+3680   	; 0x1706 <Lcd4_Write_String>
     8a6:	9f ef       	ldi	r25, 0xFF	; 255
     8a8:	23 ed       	ldi	r18, 0xD3	; 211
     8aa:	80 e3       	ldi	r24, 0x30	; 48
     8ac:	91 50       	subi	r25, 0x01	; 1
     8ae:	20 40       	sbci	r18, 0x00	; 0
     8b0:	80 40       	sbci	r24, 0x00	; 0
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <Fill+0xfe>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <Fill+0x108>
     8b6:	00 00       	nop
	_delay_ms(2000);
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
	int TEMP_Grams_Right = 0;
     8b8:	c1 2c       	mov	r12, r1
     8ba:	d1 2c       	mov	r13, r1
	Lcd4_Set_Cursor(2,0);
	Lcd4_Write_String(MyWeight2);
	_delay_ms(2000);
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
     8bc:	e1 2c       	mov	r14, r1
     8be:	f1 2c       	mov	r15, r1
	Lcd4_Write_String(MyWeight);
	Lcd4_Set_Cursor(2,0);
	Lcd4_Write_String(MyWeight2);
	_delay_ms(2000);
	
	char tempValve = 0;
     8c0:	60 e0       	ldi	r22, 0x00	; 0
	while ((abs(Global_Weight_Left-Init_Grams_Left) < Grams) || (abs(Global_Weight_Right-Init_Grams_Right) < Grams))//Grams 
	{
		if (tempValve == 0)
		{         
			//PORTK = (1<<PK4) | (1<<PK5) | (1<<PK7);// Open Valve
			PORTK |= (1<<PK4);
     8c2:	c8 e0       	ldi	r28, 0x08	; 8
     8c4:	d1 e0       	ldi	r29, 0x01	; 1
		{
			//PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
			PORTK |= (1<<PK4);//1
			PORTK &= ~(1<<PK7);//0
		}
		tempValve = 1;
     8c6:	99 24       	eor	r9, r9
     8c8:	93 94       	inc	r9
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
	int TEMP_Grams_Right = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while ((abs(Global_Weight_Left-Init_Grams_Left) < Grams) || (abs(Global_Weight_Right-Init_Grams_Right) < Grams))//Grams 
     8ca:	84 c0       	rjmp	.+264    	; 0x9d4 <Fill+0x226>
	{
		if (tempValve == 0)
     8cc:	61 11       	cpse	r22, r1
     8ce:	06 c0       	rjmp	.+12     	; 0x8dc <Fill+0x12e>
		{         
			//PORTK = (1<<PK4) | (1<<PK5) | (1<<PK7);// Open Valve
			PORTK |= (1<<PK4);
     8d0:	88 81       	ld	r24, Y
     8d2:	80 61       	ori	r24, 0x10	; 16
     8d4:	88 83       	st	Y, r24
			PORTK |= (1<<PK7);
     8d6:	88 81       	ld	r24, Y
     8d8:	80 68       	ori	r24, 0x80	; 128
     8da:	88 83       	st	Y, r24
		}
		if ((Global_Weight_Left-Init_Grams_Left) >= Grams)
     8dc:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     8e0:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
     8e4:	80 1b       	sub	r24, r16
     8e6:	91 0b       	sbc	r25, r17
     8e8:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <Grams>
     8ec:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <Grams+0x1>
     8f0:	82 17       	cp	r24, r18
     8f2:	93 07       	cpc	r25, r19
     8f4:	34 f0       	brlt	.+12     	; 0x902 <Fill+0x154>
		{
			//PORTK = (0<<PK4) | (1<<PK5) | (1<<PK7);
			PORTK &= ~(1<<PK4);//0
     8f6:	88 81       	ld	r24, Y
     8f8:	8f 7e       	andi	r24, 0xEF	; 239
     8fa:	88 83       	st	Y, r24
			PORTK |= (1<<PK7);//1
     8fc:	88 81       	ld	r24, Y
     8fe:	80 68       	ori	r24, 0x80	; 128
     900:	88 83       	st	Y, r24
		}
		if ((Global_Weight_Right-Init_Grams_Right) >= Grams)
     902:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <Global_Weight_Right>
     906:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <Global_Weight_Right+0x1>
     90a:	8a 19       	sub	r24, r10
     90c:	9b 09       	sbc	r25, r11
     90e:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <Grams>
     912:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <Grams+0x1>
     916:	82 17       	cp	r24, r18
     918:	93 07       	cpc	r25, r19
     91a:	34 f0       	brlt	.+12     	; 0x928 <Fill+0x17a>
		{
			//PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
			PORTK |= (1<<PK4);//1
     91c:	88 81       	ld	r24, Y
     91e:	80 61       	ori	r24, 0x10	; 16
     920:	88 83       	st	Y, r24
			PORTK &= ~(1<<PK7);//0
     922:	88 81       	ld	r24, Y
     924:	8f 77       	andi	r24, 0x7F	; 127
     926:	88 83       	st	Y, r24
		//Lcd4_Set_Cursor(2,0);
		//Lcd4_Write_String(MyWeight2);
		////_delay_ms(10);//700
		////_delay_ms(150);//200ok
		
		Global_Weight_Left = Get_Weight_Left();
     928:	f0 dd       	rcall	.-1056   	; 0x50a <Get_Weight_Left>
     92a:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <Global_Weight_Left+0x1>
     92e:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <Global_Weight_Left>
		if (abs(Global_Weight_Left-Init_Grams_Left) > (Grams * 5))
     932:	80 1b       	sub	r24, r16
     934:	91 0b       	sbc	r25, r17
     936:	9c 01       	movw	r18, r24
     938:	22 f4       	brpl	.+8      	; 0x942 <Fill+0x194>
     93a:	22 27       	eor	r18, r18
     93c:	33 27       	eor	r19, r19
     93e:	28 1b       	sub	r18, r24
     940:	39 0b       	sbc	r19, r25
     942:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <Grams>
     946:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <Grams+0x1>
     94a:	ac 01       	movw	r20, r24
     94c:	44 0f       	add	r20, r20
     94e:	55 1f       	adc	r21, r21
     950:	44 0f       	add	r20, r20
     952:	55 1f       	adc	r21, r21
     954:	84 0f       	add	r24, r20
     956:	95 1f       	adc	r25, r21
     958:	82 17       	cp	r24, r18
     95a:	93 07       	cpc	r25, r19
     95c:	24 f4       	brge	.+8      	; 0x966 <Fill+0x1b8>
		{
			Global_Weight_Left = TEMP_Grams_Left;
     95e:	f0 92 e7 03 	sts	0x03E7, r15	; 0x8003e7 <Global_Weight_Left+0x1>
     962:	e0 92 e6 03 	sts	0x03E6, r14	; 0x8003e6 <Global_Weight_Left>
		}
		TEMP_Grams_Left = Global_Weight_Left;
     966:	e0 90 e6 03 	lds	r14, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     96a:	f0 90 e7 03 	lds	r15, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
     96e:	8f e1       	ldi	r24, 0x1F	; 31
     970:	9e e4       	ldi	r25, 0x4E	; 78
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <Fill+0x1c4>
     976:	00 c0       	rjmp	.+0      	; 0x978 <Fill+0x1ca>
     978:	00 00       	nop
		//_delay_ms(150);
		_delay_ms(10);
		Global_Weight_Right = Get_Weight_Right();
     97a:	31 dd       	rcall	.-1438   	; 0x3de <Get_Weight_Right>
     97c:	90 93 e5 03 	sts	0x03E5, r25	; 0x8003e5 <Global_Weight_Right+0x1>
     980:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <Global_Weight_Right>
		if (abs(Global_Weight_Right-Init_Grams_Right) > (Grams * 5))
     984:	8a 19       	sub	r24, r10
     986:	9b 09       	sbc	r25, r11
     988:	9c 01       	movw	r18, r24
     98a:	22 f4       	brpl	.+8      	; 0x994 <Fill+0x1e6>
     98c:	22 27       	eor	r18, r18
     98e:	33 27       	eor	r19, r19
     990:	28 1b       	sub	r18, r24
     992:	39 0b       	sbc	r19, r25
     994:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <Grams>
     998:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <Grams+0x1>
     99c:	ac 01       	movw	r20, r24
     99e:	44 0f       	add	r20, r20
     9a0:	55 1f       	adc	r21, r21
     9a2:	44 0f       	add	r20, r20
     9a4:	55 1f       	adc	r21, r21
     9a6:	84 0f       	add	r24, r20
     9a8:	95 1f       	adc	r25, r21
     9aa:	82 17       	cp	r24, r18
     9ac:	93 07       	cpc	r25, r19
     9ae:	24 f4       	brge	.+8      	; 0x9b8 <Fill+0x20a>
		{
			Global_Weight_Right = TEMP_Grams_Right;
     9b0:	d0 92 e5 03 	sts	0x03E5, r13	; 0x8003e5 <Global_Weight_Right+0x1>
     9b4:	c0 92 e4 03 	sts	0x03E4, r12	; 0x8003e4 <Global_Weight_Right>
		}
		TEMP_Grams_Right = Global_Weight_Right;
     9b8:	c0 90 e4 03 	lds	r12, 0x03E4	; 0x8003e4 <Global_Weight_Right>
     9bc:	d0 90 e5 03 	lds	r13, 0x03E5	; 0x8003e5 <Global_Weight_Right+0x1>
     9c0:	9f e7       	ldi	r25, 0x7F	; 127
     9c2:	2f ea       	ldi	r18, 0xAF	; 175
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	91 50       	subi	r25, 0x01	; 1
     9c8:	20 40       	sbci	r18, 0x00	; 0
     9ca:	80 40       	sbci	r24, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <Fill+0x218>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <Fill+0x222>
     9d0:	00 00       	nop
		{
			//PORTK = (1<<PK4) | (0<<PK7) | (1<<PK5);
			PORTK |= (1<<PK4);//1
			PORTK &= ~(1<<PK7);//0
		}
		tempValve = 1;
     9d2:	69 2d       	mov	r22, r9
	
	char tempValve = 0;
	int TEMP_Grams_Left = 0;
	int TEMP_Grams_Right = 0;
	//PORTK = (1<<PK4) | (1<<PK5);// Open Valve
	while ((abs(Global_Weight_Left-Init_Grams_Left) < Grams) || (abs(Global_Weight_Right-Init_Grams_Right) < Grams))//Grams 
     9d4:	40 91 e8 03 	lds	r20, 0x03E8	; 0x8003e8 <Grams>
     9d8:	50 91 e9 03 	lds	r21, 0x03E9	; 0x8003e9 <Grams+0x1>
     9dc:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     9e0:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
     9e4:	80 1b       	sub	r24, r16
     9e6:	91 0b       	sbc	r25, r17
     9e8:	9c 01       	movw	r18, r24
     9ea:	22 f4       	brpl	.+8      	; 0x9f4 <Fill+0x246>
     9ec:	22 27       	eor	r18, r18
     9ee:	33 27       	eor	r19, r19
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	24 17       	cp	r18, r20
     9f6:	35 07       	cpc	r19, r21
     9f8:	0c f4       	brge	.+2      	; 0x9fc <Fill+0x24e>
     9fa:	68 cf       	rjmp	.-304    	; 0x8cc <Fill+0x11e>
     9fc:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <Global_Weight_Right>
     a00:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <Global_Weight_Right+0x1>
     a04:	8a 19       	sub	r24, r10
     a06:	9b 09       	sbc	r25, r11
     a08:	9c 01       	movw	r18, r24
     a0a:	22 f4       	brpl	.+8      	; 0xa14 <Fill+0x266>
     a0c:	22 27       	eor	r18, r18
     a0e:	33 27       	eor	r19, r19
     a10:	28 1b       	sub	r18, r24
     a12:	39 0b       	sbc	r19, r25
     a14:	24 17       	cp	r18, r20
     a16:	35 07       	cpc	r19, r21
     a18:	0c f4       	brge	.+2      	; 0xa1c <Fill+0x26e>
     a1a:	58 cf       	rjmp	.-336    	; 0x8cc <Fill+0x11e>
		}
		TEMP_Grams_Right = Global_Weight_Right;
		_delay_ms(110);
	}
	//PORTK = (0<<PK4) | (1<<PK5) | (0<<PK7);// Close Valve
	PORTK &= ~(1<<PK4);
     a1c:	e8 e0       	ldi	r30, 0x08	; 8
     a1e:	f1 e0       	ldi	r31, 0x01	; 1
     a20:	80 81       	ld	r24, Z
     a22:	8f 7e       	andi	r24, 0xEF	; 239
     a24:	80 83       	st	Z, r24
	PORTK &= ~(1<<PK7);
     a26:	80 81       	ld	r24, Z
     a28:	8f 77       	andi	r24, 0x7F	; 127
     a2a:	80 83       	st	Z, r24
	
	int oldSum_L = Sum_L;
	int oldSum_R = Sum_R;
     a2c:	c0 91 e0 03 	lds	r28, 0x03E0	; 0x8003e0 <Sum_R>
     a30:	d0 91 e1 03 	lds	r29, 0x03E1	; 0x8003e1 <Sum_R+0x1>
	
	tempValve = 0;
	
	Sum_L = Sum_L + abs(Global_Weight_Left-Init_Grams_Left);
     a34:	80 91 e6 03 	lds	r24, 0x03E6	; 0x8003e6 <Global_Weight_Left>
     a38:	90 91 e7 03 	lds	r25, 0x03E7	; 0x8003e7 <Global_Weight_Left+0x1>
     a3c:	80 1b       	sub	r24, r16
     a3e:	91 0b       	sbc	r25, r17
     a40:	9c 01       	movw	r18, r24
     a42:	22 f4       	brpl	.+8      	; 0xa4c <Fill+0x29e>
     a44:	22 27       	eor	r18, r18
     a46:	33 27       	eor	r19, r19
     a48:	28 1b       	sub	r18, r24
     a4a:	39 0b       	sbc	r19, r25
     a4c:	b9 01       	movw	r22, r18
     a4e:	40 91 e2 03 	lds	r20, 0x03E2	; 0x8003e2 <Sum_L>
     a52:	50 91 e3 03 	lds	r21, 0x03E3	; 0x8003e3 <Sum_L+0x1>
     a56:	24 0f       	add	r18, r20
     a58:	35 1f       	adc	r19, r21
     a5a:	30 93 e3 03 	sts	0x03E3, r19	; 0x8003e3 <Sum_L+0x1>
     a5e:	20 93 e2 03 	sts	0x03E2, r18	; 0x8003e2 <Sum_L>
	Sum_R = Sum_R + abs(Global_Weight_Right-Init_Grams_Right);
     a62:	40 91 e4 03 	lds	r20, 0x03E4	; 0x8003e4 <Global_Weight_Right>
     a66:	50 91 e5 03 	lds	r21, 0x03E5	; 0x8003e5 <Global_Weight_Right+0x1>
     a6a:	4a 19       	sub	r20, r10
     a6c:	5b 09       	sbc	r21, r11
     a6e:	9a 01       	movw	r18, r20
     a70:	22 f4       	brpl	.+8      	; 0xa7a <Fill+0x2cc>
     a72:	22 27       	eor	r18, r18
     a74:	33 27       	eor	r19, r19
     a76:	24 1b       	sub	r18, r20
     a78:	35 0b       	sbc	r19, r21
     a7a:	2c 0f       	add	r18, r28
     a7c:	3d 1f       	adc	r19, r29
     a7e:	30 93 e1 03 	sts	0x03E1, r19	; 0x8003e1 <Sum_R+0x1>
     a82:	20 93 e0 03 	sts	0x03E0, r18	; 0x8003e0 <Sum_R>
	
	if (Sum_L - oldSum_L > Grams + 50 || Global_Weight_Left - Init_Grams_Left > Grams + 3//4 
     a86:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <Grams>
     a8a:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <Grams+0x1>
     a8e:	a9 01       	movw	r20, r18
     a90:	4e 5c       	subi	r20, 0xCE	; 206
     a92:	5f 4f       	sbci	r21, 0xFF	; 255
     a94:	46 17       	cp	r20, r22
     a96:	57 07       	cpc	r21, r23
     a98:	54 f0       	brlt	.+20     	; 0xaae <Fill+0x300>
     a9a:	4f 52       	subi	r20, 0x2F	; 47
     a9c:	51 09       	sbc	r21, r1
     a9e:	48 17       	cp	r20, r24
     aa0:	59 07       	cpc	r21, r25
     aa2:	2c f0       	brlt	.+10     	; 0xaae <Fill+0x300>
								  || Global_Weight_Left - Init_Grams_Left < Grams - 3)//4
     aa4:	23 50       	subi	r18, 0x03	; 3
     aa6:	31 09       	sbc	r19, r1
     aa8:	82 17       	cp	r24, r18
     aaa:	93 07       	cpc	r25, r19
     aac:	34 f5       	brge	.+76     	; 0xafa <Fill+0x34c>
	{
		Lcd4_Clear();
     aae:	a8 d5       	rcall	.+2896   	; 0x1600 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	a8 d5       	rcall	.+2896   	; 0x160a <Lcd4_Set_Cursor>
		Lcd4_Write_String("Sum overflow L");
     aba:	8d e1       	ldi	r24, 0x1D	; 29
     abc:	92 e0       	ldi	r25, 0x02	; 2
     abe:	23 d6       	rcall	.+3142   	; 0x1706 <Lcd4_Write_String>
     ac0:	9f ef       	ldi	r25, 0xFF	; 255
     ac2:	23 ed       	ldi	r18, 0xD3	; 211
     ac4:	80 e3       	ldi	r24, 0x30	; 48
     ac6:	91 50       	subi	r25, 0x01	; 1
     ac8:	20 40       	sbci	r18, 0x00	; 0
     aca:	80 40       	sbci	r24, 0x00	; 0
     acc:	e1 f7       	brne	.-8      	; 0xac6 <Fill+0x318>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <Fill+0x322>
     ad0:	00 00       	nop
		_delay_ms(2000);
		errorFill_L[countErrors_L] = countFill;
     ad2:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <countErrors_L>
     ad6:	90 91 77 03 	lds	r25, 0x0377	; 0x800377 <countErrors_L+0x1>
     ada:	fc 01       	movw	r30, r24
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	e8 54       	subi	r30, 0x48	; 72
     ae2:	fc 4f       	sbci	r31, 0xFC	; 252
     ae4:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <countFill>
     ae8:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <countFill+0x1>
     aec:	31 83       	std	Z+1, r19	; 0x01
     aee:	20 83       	st	Z, r18
		countErrors_L++;
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	90 93 77 03 	sts	0x0377, r25	; 0x800377 <countErrors_L+0x1>
     af6:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <countErrors_L>
     afa:	8f e1       	ldi	r24, 0x1F	; 31
     afc:	9e e4       	ldi	r25, 0x4E	; 78
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <Fill+0x350>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <Fill+0x356>
     b04:	00 00       	nop
	}
	_delay_ms(10);
	if (Sum_R - oldSum_R > Grams + 50 || Global_Weight_Right - Init_Grams_Right > Grams + 3//4
     b06:	20 91 e8 03 	lds	r18, 0x03E8	; 0x8003e8 <Grams>
     b0a:	30 91 e9 03 	lds	r19, 0x03E9	; 0x8003e9 <Grams+0x1>
     b0e:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <Sum_R>
     b12:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <Sum_R+0x1>
     b16:	8c 1b       	sub	r24, r28
     b18:	9d 0b       	sbc	r25, r29
     b1a:	a9 01       	movw	r20, r18
     b1c:	4e 5c       	subi	r20, 0xCE	; 206
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	48 17       	cp	r20, r24
     b22:	59 07       	cpc	r21, r25
     b24:	84 f0       	brlt	.+32     	; 0xb46 <Fill+0x398>
     b26:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <Global_Weight_Right>
     b2a:	90 91 e5 03 	lds	r25, 0x03E5	; 0x8003e5 <Global_Weight_Right+0x1>
     b2e:	8a 19       	sub	r24, r10
     b30:	9b 09       	sbc	r25, r11
     b32:	4f 52       	subi	r20, 0x2F	; 47
     b34:	51 09       	sbc	r21, r1
     b36:	48 17       	cp	r20, r24
     b38:	59 07       	cpc	r21, r25
     b3a:	2c f0       	brlt	.+10     	; 0xb46 <Fill+0x398>
								  || Global_Weight_Right - Init_Grams_Right < Grams - 3)//4
     b3c:	23 50       	subi	r18, 0x03	; 3
     b3e:	31 09       	sbc	r19, r1
     b40:	82 17       	cp	r24, r18
     b42:	93 07       	cpc	r25, r19
     b44:	34 f5       	brge	.+76     	; 0xb92 <Fill+0x3e4>
	{
		Lcd4_Clear();
     b46:	5c d5       	rcall	.+2744   	; 0x1600 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
     b48:	60 e0       	ldi	r22, 0x00	; 0
     b4a:	70 e0       	ldi	r23, 0x00	; 0
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	5c d5       	rcall	.+2744   	; 0x160a <Lcd4_Set_Cursor>
		Lcd4_Write_String("Sum overflow R");
     b52:	8a e3       	ldi	r24, 0x3A	; 58
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	d7 d5       	rcall	.+2990   	; 0x1706 <Lcd4_Write_String>
     b58:	9f ef       	ldi	r25, 0xFF	; 255
     b5a:	23 ed       	ldi	r18, 0xD3	; 211
     b5c:	80 e3       	ldi	r24, 0x30	; 48
     b5e:	91 50       	subi	r25, 0x01	; 1
     b60:	20 40       	sbci	r18, 0x00	; 0
     b62:	80 40       	sbci	r24, 0x00	; 0
     b64:	e1 f7       	brne	.-8      	; 0xb5e <Fill+0x3b0>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <Fill+0x3ba>
     b68:	00 00       	nop
		_delay_ms(2000);
		errorFill_R[countErrors_R] = countFill;
     b6a:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <countErrors_R>
     b6e:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <countErrors_R+0x1>
     b72:	fc 01       	movw	r30, r24
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	e0 57       	subi	r30, 0x70	; 112
     b7a:	fc 4f       	sbci	r31, 0xFC	; 252
     b7c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <countFill>
     b80:	30 91 05 02 	lds	r19, 0x0205	; 0x800205 <countFill+0x1>
     b84:	31 83       	std	Z+1, r19	; 0x01
     b86:	20 83       	st	Z, r18
		countErrors_R++;
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <countErrors_R+0x1>
     b8e:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <countErrors_R>
	}
	countFill++;
     b92:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <countFill>
     b96:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <countFill+0x1>
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <countFill+0x1>
     ba0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <countFill>
     ba4:	8f e1       	ldi	r24, 0x1F	; 31
     ba6:	9e e4       	ldi	r25, 0x4E	; 78
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <Fill+0x3fa>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <Fill+0x400>
     bae:	00 00       	nop
	//	Lcd4_Set_Cursor(2,0);
	//	Lcd4_Write_String(MyWeight);
	//	_delay_ms(4000);
	//}
	
	Lcd4_Clear();
     bb0:	27 d5       	rcall	.+2638   	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	27 d5       	rcall	.+2638   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Fill Complete");
     bbc:	8c e2       	ldi	r24, 0x2C	; 44
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	a2 d5       	rcall	.+2884   	; 0x1706 <Lcd4_Write_String>
     bc2:	9f ef       	ldi	r25, 0xFF	; 255
     bc4:	29 e6       	ldi	r18, 0x69	; 105
     bc6:	88 e1       	ldi	r24, 0x18	; 24
     bc8:	91 50       	subi	r25, 0x01	; 1
     bca:	20 40       	sbci	r18, 0x00	; 0
     bcc:	80 40       	sbci	r24, 0x00	; 0
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <Fill+0x41a>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <Fill+0x424>
     bd2:	00 00       	nop
	_delay_ms(1000);
	//PORTK = (1<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	08 95       	ret

00000bec <Go_To>:
		Lcd4_Set_Cursor(1,0);
		Lcd4_Write_String("Zero Set");
	}
} 
int Go_To (int X_Axis, int Y_Axis) //int STOP_X, int STOP_Y
{
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
	int flagdir = 0;
	char Count = 0;
	char Xtemp;
	char Ytemp;
	for (Ytemp = 0; Ytemp < Y_Axis; Ytemp++)
     c0a:	16 16       	cp	r1, r22
     c0c:	17 06       	cpc	r1, r23
     c0e:	0c f0       	brlt	.+2      	; 0xc12 <Go_To+0x26>
     c10:	4d c1       	rjmp	.+666    	; 0xeac <Go_To+0x2c0>
	{
		if (STOP_Y == 0)// switch check 
     c12:	20 91 ea 03 	lds	r18, 0x03EA	; 0x8003ea <STOP_Y>
     c16:	30 91 eb 03 	lds	r19, 0x03EB	; 0x8003eb <STOP_Y+0x1>
     c1a:	21 15       	cp	r18, r1
     c1c:	31 05       	cpc	r19, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <Go_To+0x36>
     c20:	42 c0       	rjmp	.+132    	; 0xca6 <Go_To+0xba>
     c22:	44 c1       	rjmp	.+648    	; 0xeac <Go_To+0x2c0>
     c24:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <STOP_Y>
     c28:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <STOP_Y+0x1>
     c2c:	89 2b       	or	r24, r25
     c2e:	09 f0       	breq	.+2      	; 0xc32 <Go_To+0x46>
     c30:	3d c1       	rjmp	.+634    	; 0xeac <Go_To+0x2c0>
		{
			if (Ytemp == 0)
     c32:	77 20       	and	r7, r7
     c34:	b1 f1       	breq	.+108    	; 0xca2 <Go_To+0xb6>
			{
				//nada 
			}
			else
			{
				if (Capacity == 1)
     c36:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Capacity>
     c3a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Capacity+0x1>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	79 f4       	brne	.+30     	; 0xc60 <Go_To+0x74>
				{
					if (Count == No_Cups - 1)
     c42:	2c 2f       	mov	r18, r28
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <No_Cups>
     c4a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <No_Cups+0x1>
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	09 f4       	brne	.+2      	; 0xc58 <Go_To+0x6c>
     c56:	2a c1       	rjmp	.+596    	; 0xeac <Go_To+0x2c0>
					{
						return;
					}
					Fill();
     c58:	aa dd       	rcall	.-1196   	; 0x7ae <Fill>
					Count++;
     c5a:	d1 e0       	ldi	r29, 0x01	; 1
     c5c:	dc 0f       	add	r29, r28
     c5e:	0e c0       	rjmp	.+28     	; 0xc7c <Go_To+0x90>
				}
				else
				{
					if (Count == No_Cups - 1)
     c60:	2c 2f       	mov	r18, r28
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <No_Cups>
     c68:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <No_Cups+0x1>
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	09 f4       	brne	.+2      	; 0xc76 <Go_To+0x8a>
     c74:	1b c1       	rjmp	.+566    	; 0xeac <Go_To+0x2c0>
					{
						return;
					}
					FillHalf();
     c76:	93 dc       	rcall	.-1754   	; 0x59e <FillHalf>
					Count++;
     c78:	d1 e0       	ldi	r29, 0x01	; 1
     c7a:	dc 0f       	add	r29, r28
				}
				if (Y_Axis < 5)//X_Axis < 3
     c7c:	05 30       	cpi	r16, 0x05	; 5
     c7e:	11 05       	cpc	r17, r1
     c80:	14 f4       	brge	.+4      	; 0xc86 <Go_To+0x9a>
				{
					Y_Axis_Big_Step_Plus();
     c82:	45 db       	rcall	.-2422   	; 0x30e <Y_Axis_Big_Step_Plus>
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <Go_To+0x9c>
				}
				else
				{
					Y_Axis_Step_Plus();
     c86:	ae da       	rcall	.-2724   	; 0x1e4 <Y_Axis_Step_Plus>
     c88:	2f ef       	ldi	r18, 0xFF	; 255
     c8a:	84 e3       	ldi	r24, 0x34	; 52
     c8c:	9c e0       	ldi	r25, 0x0C	; 12
     c8e:	21 50       	subi	r18, 0x01	; 1
     c90:	80 40       	sbci	r24, 0x00	; 0
     c92:	90 40       	sbci	r25, 0x00	; 0
     c94:	e1 f7       	brne	.-8      	; 0xc8e <Go_To+0xa2>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <Go_To+0xac>
     c98:	00 00       	nop
				}
				_delay_ms(500);
				flagdir++;
     c9a:	2f ef       	ldi	r18, 0xFF	; 255
     c9c:	c2 1a       	sub	r12, r18
     c9e:	d2 0a       	sbc	r13, r18
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <Go_To+0xd4>
     ca2:	dc 2f       	mov	r29, r28
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <Go_To+0xd4>
     ca6:	8b 01       	movw	r16, r22
     ca8:	7c 01       	movw	r14, r24
	char Count = 0;
	char Xtemp;
	char Ytemp;
	for (Ytemp = 0; Ytemp < Y_Axis; Ytemp++)
	{
		if (STOP_Y == 0)// switch check 
     caa:	59 01       	movw	r10, r18
     cac:	71 2c       	mov	r7, r1
     cae:	d0 e0       	ldi	r29, 0x00	; 0
     cb0:	c1 2c       	mov	r12, r1
     cb2:	d1 2c       	mov	r13, r1
				{
					//STOP_X = 0;
					return;
				}
			}
			if (Xtemp == X_Axis && Ytemp == Y_Axis - 1)// fill last position
     cb4:	4b 01       	movw	r8, r22
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	88 1a       	sub	r8, r24
     cba:	91 08       	sbc	r9, r1
			return;
		} 
		
		if (flagdir % 2)// switch direction
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     cbc:	52 2e       	mov	r5, r18
     cbe:	63 2e       	mov	r6, r19
		{
			//STOP_Y = 0;
			return;
		} 
		
		if (flagdir % 2)// switch direction
     cc0:	c0 fc       	sbrc	r12, 0
     cc2:	0e c0       	rjmp	.+28     	; 0xce0 <Go_To+0xf4>
				}
			}
		}
		else
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     cc4:	1e 14       	cp	r1, r14
     cc6:	1f 04       	cpc	r1, r15
     cc8:	0c f0       	brlt	.+2      	; 0xccc <Go_To+0xe0>
     cca:	c3 c0       	rjmp	.+390    	; 0xe52 <Go_To+0x266>
			{
				if (STOP_X == 0)
     ccc:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <STOP_X>
     cd0:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <STOP_X+0x1>
     cd4:	89 2b       	or	r24, r25
     cd6:	09 f0       	breq	.+2      	; 0xcda <Go_To+0xee>
     cd8:	e9 c0       	rjmp	.+466    	; 0xeac <Go_To+0x2c0>
     cda:	c1 e0       	ldi	r28, 0x01	; 1
     cdc:	cd 0f       	add	r28, r29
     cde:	80 c0       	rjmp	.+256    	; 0xde0 <Go_To+0x1f4>
			return;
		} 
		
		if (flagdir % 2)// switch direction
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     ce0:	1e 14       	cp	r1, r14
     ce2:	1f 04       	cpc	r1, r15
     ce4:	0c f0       	brlt	.+2      	; 0xce8 <Go_To+0xfc>
     ce6:	4b c0       	rjmp	.+150    	; 0xd7e <Go_To+0x192>
			{
				if (STOP_X == 0)
     ce8:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <STOP_X>
     cec:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <STOP_X+0x1>
     cf0:	89 2b       	or	r24, r25
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <Go_To+0x10a>
     cf4:	db c0       	rjmp	.+438    	; 0xeac <Go_To+0x2c0>
     cf6:	c1 e0       	ldi	r28, 0x01	; 1
     cf8:	cd 0f       	add	r28, r29
     cfa:	08 c0       	rjmp	.+16     	; 0xd0c <Go_To+0x120>
     cfc:	cf 5f       	subi	r28, 0xFF	; 255
     cfe:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <STOP_X>
     d02:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <STOP_X+0x1>
     d06:	89 2b       	or	r24, r25
     d08:	09 f0       	breq	.+2      	; 0xd0c <Go_To+0x120>
     d0a:	d0 c0       	rjmp	.+416    	; 0xeac <Go_To+0x2c0>
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	8c 0f       	add	r24, r28
				{
					if (Capacity == 1)
     d10:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <Capacity>
     d14:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <Capacity+0x1>
     d18:	21 30       	cpi	r18, 0x01	; 1
     d1a:	31 05       	cpc	r19, r1
     d1c:	69 f4       	brne	.+26     	; 0xd38 <Go_To+0x14c>
					{
						if (Count == No_Cups - 1)
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <No_Cups>
     d24:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <No_Cups+0x1>
     d28:	21 50       	subi	r18, 0x01	; 1
     d2a:	31 09       	sbc	r19, r1
     d2c:	82 17       	cp	r24, r18
     d2e:	93 07       	cpc	r25, r19
     d30:	09 f4       	brne	.+2      	; 0xd34 <Go_To+0x148>
     d32:	bc c0       	rjmp	.+376    	; 0xeac <Go_To+0x2c0>
						{
							return;
						}
						Fill();
     d34:	3c dd       	rcall	.-1416   	; 0x7ae <Fill>
     d36:	0c c0       	rjmp	.+24     	; 0xd50 <Go_To+0x164>
						Count++;
					}
					else
					{
						if (Count == No_Cups - 1)
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <No_Cups>
     d3e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <No_Cups+0x1>
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	31 09       	sbc	r19, r1
     d46:	82 17       	cp	r24, r18
     d48:	93 07       	cpc	r25, r19
     d4a:	09 f4       	brne	.+2      	; 0xd4e <Go_To+0x162>
     d4c:	af c0       	rjmp	.+350    	; 0xeac <Go_To+0x2c0>
						{
							return;
						}
						FillHalf();
     d4e:	27 dc       	rcall	.-1970   	; 0x59e <FillHalf>
						Count++;
					}
					if (Y_Axis < 5)
     d50:	05 30       	cpi	r16, 0x05	; 5
     d52:	11 05       	cpc	r17, r1
     d54:	14 f4       	brge	.+4      	; 0xd5a <Go_To+0x16e>
					{
						X_Axis_Big_Step_Minus();
     d56:	bf da       	rcall	.-2690   	; 0x2d6 <X_Axis_Big_Step_Minus>
     d58:	01 c0       	rjmp	.+2      	; 0xd5c <Go_To+0x170>
					}
					else
					{
						X_Axis_Step_Minus();
     d5a:	28 da       	rcall	.-2992   	; 0x1ac <X_Axis_Step_Minus>
     d5c:	9f ef       	ldi	r25, 0xFF	; 255
     d5e:	24 e3       	ldi	r18, 0x34	; 52
     d60:	8c e0       	ldi	r24, 0x0C	; 12
     d62:	91 50       	subi	r25, 0x01	; 1
     d64:	20 40       	sbci	r18, 0x00	; 0
     d66:	80 40       	sbci	r24, 0x00	; 0
     d68:	e1 f7       	brne	.-8      	; 0xd62 <Go_To+0x176>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <Go_To+0x180>
     d6c:	00 00       	nop
			return;
		} 
		
		if (flagdir % 2)// switch direction
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     d6e:	8c 2f       	mov	r24, r28
     d70:	8d 1b       	sub	r24, r29
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	8e 15       	cp	r24, r14
     d76:	9f 05       	cpc	r25, r15
     d78:	0c f4       	brge	.+2      	; 0xd7c <Go_To+0x190>
     d7a:	c0 cf       	rjmp	.-128    	; 0xcfc <Go_To+0x110>
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <Go_To+0x198>
     d7e:	85 2d       	mov	r24, r5
     d80:	96 2d       	mov	r25, r6
     d82:	cd 2f       	mov	r28, r29
				{
					//STOP_X = 0;
					return;
				}
			}
			if (Xtemp == X_Axis && Ytemp == Y_Axis - 1)// fill last position
     d84:	e8 16       	cp	r14, r24
     d86:	f9 06       	cpc	r15, r25
     d88:	09 f0       	breq	.+2      	; 0xd8c <Go_To+0x1a0>
     d8a:	89 c0       	rjmp	.+274    	; 0xe9e <Go_To+0x2b2>
     d8c:	a8 14       	cp	r10, r8
     d8e:	b9 04       	cpc	r11, r9
     d90:	09 f0       	breq	.+2      	; 0xd94 <Go_To+0x1a8>
     d92:	85 c0       	rjmp	.+266    	; 0xe9e <Go_To+0x2b2>
			{
				Lcd4_Clear();
     d94:	35 d4       	rcall	.+2154   	; 0x1600 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	35 d4       	rcall	.+2154   	; 0x160a <Lcd4_Set_Cursor>
				Lcd4_Write_String("IN Axis Minus");
     da0:	89 e4       	ldi	r24, 0x49	; 73
     da2:	92 e0       	ldi	r25, 0x02	; 2
     da4:	b0 d4       	rcall	.+2400   	; 0x1706 <Lcd4_Write_String>
     da6:	9f ef       	ldi	r25, 0xFF	; 255
     da8:	23 ed       	ldi	r18, 0xD3	; 211
     daa:	80 e3       	ldi	r24, 0x30	; 48
     dac:	91 50       	subi	r25, 0x01	; 1
     dae:	20 40       	sbci	r18, 0x00	; 0
     db0:	80 40       	sbci	r24, 0x00	; 0
     db2:	e1 f7       	brne	.-8      	; 0xdac <Go_To+0x1c0>
     db4:	00 c0       	rjmp	.+0      	; 0xdb6 <Go_To+0x1ca>
     db6:	00 00       	nop
				_delay_ms(2000);
				if (Capacity == 1)
     db8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Capacity>
     dbc:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Capacity+0x1>
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	19 f4       	brne	.+6      	; 0xdca <Go_To+0x1de>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					Fill();
     dc4:	f4 dc       	rcall	.-1560   	; 0x7ae <Fill>
					Count++;
     dc6:	cf 5f       	subi	r28, 0xFF	; 255
     dc8:	6a c0       	rjmp	.+212    	; 0xe9e <Go_To+0x2b2>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					FillHalf();
     dca:	e9 db       	rcall	.-2094   	; 0x59e <FillHalf>
					Count++;
     dcc:	cf 5f       	subi	r28, 0xFF	; 255
     dce:	67 c0       	rjmp	.+206    	; 0xe9e <Go_To+0x2b2>
     dd0:	cf 5f       	subi	r28, 0xFF	; 255
		}
		else
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
			{
				if (STOP_X == 0)
     dd2:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <STOP_X>
     dd6:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <STOP_X+0x1>
     dda:	89 2b       	or	r24, r25
     ddc:	09 f0       	breq	.+2      	; 0xde0 <Go_To+0x1f4>
     dde:	66 c0       	rjmp	.+204    	; 0xeac <Go_To+0x2c0>
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	8c 0f       	add	r24, r28
				{
					if (Capacity == 1)
     de4:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <Capacity>
     de8:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <Capacity+0x1>
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	69 f4       	brne	.+26     	; 0xe0c <Go_To+0x220>
					{
						if (Count == No_Cups - 1)
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <No_Cups>
     df8:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <No_Cups+0x1>
     dfc:	21 50       	subi	r18, 0x01	; 1
     dfe:	31 09       	sbc	r19, r1
     e00:	82 17       	cp	r24, r18
     e02:	93 07       	cpc	r25, r19
     e04:	09 f4       	brne	.+2      	; 0xe08 <Go_To+0x21c>
     e06:	52 c0       	rjmp	.+164    	; 0xeac <Go_To+0x2c0>
						{
							return;
						}
						Fill();
     e08:	d2 dc       	rcall	.-1628   	; 0x7ae <Fill>
     e0a:	0c c0       	rjmp	.+24     	; 0xe24 <Go_To+0x238>
						Count++;
					}
					else
					{
						if (Count == No_Cups - 1)
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <No_Cups>
     e12:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <No_Cups+0x1>
     e16:	21 50       	subi	r18, 0x01	; 1
     e18:	31 09       	sbc	r19, r1
     e1a:	82 17       	cp	r24, r18
     e1c:	93 07       	cpc	r25, r19
     e1e:	09 f4       	brne	.+2      	; 0xe22 <Go_To+0x236>
     e20:	45 c0       	rjmp	.+138    	; 0xeac <Go_To+0x2c0>
						{
							return;
						}
						FillHalf();
     e22:	bd db       	rcall	.-2182   	; 0x59e <FillHalf>
						Count++;
					}
					if (Y_Axis < 5)
     e24:	05 30       	cpi	r16, 0x05	; 5
     e26:	11 05       	cpc	r17, r1
     e28:	14 f4       	brge	.+4      	; 0xe2e <Go_To+0x242>
					{
						X_Axis_Big_Step_Plus();
     e2a:	39 da       	rcall	.-2958   	; 0x29e <X_Axis_Big_Step_Plus>
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <Go_To+0x244>
					}
					else
					{
						X_Axis_Step_Plus();
     e2e:	a2 d9       	rcall	.-3260   	; 0x174 <X_Axis_Step_Plus>
     e30:	9f ef       	ldi	r25, 0xFF	; 255
     e32:	24 e3       	ldi	r18, 0x34	; 52
     e34:	8c e0       	ldi	r24, 0x0C	; 12
     e36:	91 50       	subi	r25, 0x01	; 1
     e38:	20 40       	sbci	r18, 0x00	; 0
     e3a:	80 40       	sbci	r24, 0x00	; 0
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <Go_To+0x24a>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <Go_To+0x254>
     e40:	00 00       	nop
				}
			}
		}
		else
		{
			for (Xtemp = 0; Xtemp < X_Axis; Xtemp++)
     e42:	8c 2f       	mov	r24, r28
     e44:	8d 1b       	sub	r24, r29
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	8e 15       	cp	r24, r14
     e4a:	9f 05       	cpc	r25, r15
     e4c:	0c f4       	brge	.+2      	; 0xe50 <Go_To+0x264>
     e4e:	c0 cf       	rjmp	.-128    	; 0xdd0 <Go_To+0x1e4>
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <Go_To+0x26c>
     e52:	85 2d       	mov	r24, r5
     e54:	96 2d       	mov	r25, r6
     e56:	cd 2f       	mov	r28, r29
				{
					//STOP_X = 0;
					return;
				}
			}
			if (Xtemp == X_Axis && Ytemp == Y_Axis - 1)// fill last position
     e58:	e8 16       	cp	r14, r24
     e5a:	f9 06       	cpc	r15, r25
     e5c:	01 f5       	brne	.+64     	; 0xe9e <Go_To+0x2b2>
     e5e:	a8 14       	cp	r10, r8
     e60:	b9 04       	cpc	r11, r9
     e62:	e9 f4       	brne	.+58     	; 0xe9e <Go_To+0x2b2>
			{
				Lcd4_Clear();
     e64:	cd d3       	rcall	.+1946   	; 0x1600 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	cd d3       	rcall	.+1946   	; 0x160a <Lcd4_Set_Cursor>
				Lcd4_Write_String("IN Axis Plus");
     e70:	87 e5       	ldi	r24, 0x57	; 87
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	48 d4       	rcall	.+2192   	; 0x1706 <Lcd4_Write_String>
     e76:	9f ef       	ldi	r25, 0xFF	; 255
     e78:	23 ed       	ldi	r18, 0xD3	; 211
     e7a:	80 e3       	ldi	r24, 0x30	; 48
     e7c:	91 50       	subi	r25, 0x01	; 1
     e7e:	20 40       	sbci	r18, 0x00	; 0
     e80:	80 40       	sbci	r24, 0x00	; 0
     e82:	e1 f7       	brne	.-8      	; 0xe7c <Go_To+0x290>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <Go_To+0x29a>
     e86:	00 00       	nop
				_delay_ms(2000);
				if (Capacity == 1)
     e88:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <Capacity>
     e8c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <Capacity+0x1>
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	19 f4       	brne	.+6      	; 0xe9a <Go_To+0x2ae>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					Fill();
     e94:	8c dc       	rcall	.-1768   	; 0x7ae <Fill>
					Count++;
     e96:	cf 5f       	subi	r28, 0xFF	; 255
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <Go_To+0x2b2>
				{
					//if (Count == No_Cups - 1)
					//{
					//	return;
					//}
					FillHalf();
     e9a:	81 db       	rcall	.-2302   	; 0x59e <FillHalf>
					Count++;
     e9c:	cf 5f       	subi	r28, 0xFF	; 255
{
	int flagdir = 0;
	char Count = 0;
	char Xtemp;
	char Ytemp;
	for (Ytemp = 0; Ytemp < Y_Axis; Ytemp++)
     e9e:	73 94       	inc	r7
     ea0:	a7 2c       	mov	r10, r7
     ea2:	b1 2c       	mov	r11, r1
     ea4:	a0 16       	cp	r10, r16
     ea6:	b1 06       	cpc	r11, r17
     ea8:	0c f4       	brge	.+2      	; 0xeac <Go_To+0x2c0>
     eaa:	bc ce       	rjmp	.-648    	; 0xc24 <Go_To+0x38>
			}
		}
	}
	return;
	
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	7f 90       	pop	r7
     ec6:	6f 90       	pop	r6
     ec8:	5f 90       	pop	r5
     eca:	08 95       	ret

00000ecc <SetWeight>:
	_delay_ms(1000);
	//PORTK = (1<<PK5) | (0<<PK4) | (0<<PK7);// Kill AIR
}

void SetWeight(void)
{
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
	Lcd4_Clear();
     ed0:	97 d3       	rcall	.+1838   	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	97 d3       	rcall	.+1838   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Weight:");
     edc:	8a ed       	ldi	r24, 0xDA	; 218
     ede:	92 e0       	ldi	r25, 0x02	; 2
     ee0:	12 d4       	rcall	.+2084   	; 0x1706 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	82 e0       	ldi	r24, 0x02	; 2
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	8f d3       	rcall	.+1822   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("0");
     eec:	8b e6       	ldi	r24, 0x6B	; 107
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	0a d4       	rcall	.+2068   	; 0x1706 <Lcd4_Write_String>
	while(1)
	{
		if (!(bit_is_clear(PINL, PL5)))
     ef2:	c9 e0       	ldi	r28, 0x09	; 9
     ef4:	d1 e0       	ldi	r29, 0x01	; 1
     ef6:	88 81       	ld	r24, Y
     ef8:	85 ff       	sbrs	r24, 5
     efa:	1f c0       	rjmp	.+62     	; 0xf3a <SetWeight+0x6e>
		{
			if (Gram_Target >= 150)
     efc:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <Gram_Target>
     f00:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <Gram_Target+0x1>
     f04:	86 39       	cpi	r24, 0x96	; 150
     f06:	91 05       	cpc	r25, r1
     f08:	5c f0       	brlt	.+22     	; 0xf20 <SetWeight+0x54>
			{
				X_Axis = 3;//velike case
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <X_Axis+0x1>
     f12:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <X_Axis>
				Y_Axis = 3;//3 bilo
     f16:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <Y_Axis+0x1>
     f1a:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <Y_Axis>
     f1e:	66 c0       	rjmp	.+204    	; 0xfec <SetWeight+0x120>
			}
			else 
			{
				X_Axis = 3;//male case
     f20:	83 e0       	ldi	r24, 0x03	; 3
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <X_Axis+0x1>
     f28:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <X_Axis>
				Y_Axis = 5;
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	90 93 f0 03 	sts	0x03F0, r25	; 0x8003f0 <Y_Axis+0x1>
     f34:	80 93 ef 03 	sts	0x03EF, r24	; 0x8003ef <Y_Axis>
     f38:	59 c0       	rjmp	.+178    	; 0xfec <SetWeight+0x120>
			}
			return;
		}
		else if (!(bit_is_clear(PINL, PL6)))//UP
     f3a:	88 81       	ld	r24, Y
     f3c:	86 ff       	sbrs	r24, 6
     f3e:	29 c0       	rjmp	.+82     	; 0xf92 <SetWeight+0xc6>
		{
			Gram_Target = Gram_Target + 5;
     f40:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <Gram_Target>
     f44:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <Gram_Target+0x1>
     f48:	05 96       	adiw	r24, 0x05	; 5
     f4a:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <Gram_Target+0x1>
     f4e:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <Gram_Target>
     f52:	4a e0       	ldi	r20, 0x0A	; 10
     f54:	63 ef       	ldi	r22, 0xF3	; 243
     f56:	73 e0       	ldi	r23, 0x03	; 3
     f58:	0e 94 36 10 	call	0x206c	; 0x206c <__itoa_ncheck>
			itoa(Gram_Target, MyWeight, 10);
			Lcd4_Clear();
     f5c:	51 d3       	rcall	.+1698   	; 0x1600 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	51 d3       	rcall	.+1698   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Weight:");
     f68:	8a ed       	ldi	r24, 0xDA	; 218
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	cc d3       	rcall	.+1944   	; 0x1706 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	82 e0       	ldi	r24, 0x02	; 2
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	49 d3       	rcall	.+1682   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
     f78:	83 ef       	ldi	r24, 0xF3	; 243
     f7a:	93 e0       	ldi	r25, 0x03	; 3
     f7c:	c4 d3       	rcall	.+1928   	; 0x1706 <Lcd4_Write_String>
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	82 e5       	ldi	r24, 0x52	; 82
     f82:	97 e0       	ldi	r25, 0x07	; 7
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	80 40       	sbci	r24, 0x00	; 0
     f88:	90 40       	sbci	r25, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <SetWeight+0xb8>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <SetWeight+0xc2>
     f8e:	00 00       	nop
     f90:	b2 cf       	rjmp	.-156    	; 0xef6 <SetWeight+0x2a>
			_delay_ms(300);//700 
		}
		else if (!(bit_is_clear(PINL, PL7)))//DOWN
     f92:	88 81       	ld	r24, Y
     f94:	88 23       	and	r24, r24
     f96:	0c f0       	brlt	.+2      	; 0xf9a <SetWeight+0xce>
     f98:	ae cf       	rjmp	.-164    	; 0xef6 <SetWeight+0x2a>
		{
			Gram_Target = Gram_Target - 5;
     f9a:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <Gram_Target>
     f9e:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <Gram_Target+0x1>
     fa2:	05 97       	sbiw	r24, 0x05	; 5
     fa4:	90 93 73 03 	sts	0x0373, r25	; 0x800373 <Gram_Target+0x1>
     fa8:	80 93 72 03 	sts	0x0372, r24	; 0x800372 <Gram_Target>
     fac:	4a e0       	ldi	r20, 0x0A	; 10
     fae:	63 ef       	ldi	r22, 0xF3	; 243
     fb0:	73 e0       	ldi	r23, 0x03	; 3
     fb2:	0e 94 36 10 	call	0x206c	; 0x206c <__itoa_ncheck>
			itoa(Gram_Target, MyWeight, 10);
			Lcd4_Clear();
     fb6:	24 d3       	rcall	.+1608   	; 0x1600 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	24 d3       	rcall	.+1608   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Weight:");
     fc2:	8a ed       	ldi	r24, 0xDA	; 218
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	9f d3       	rcall	.+1854   	; 0x1706 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	1c d3       	rcall	.+1592   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
     fd2:	83 ef       	ldi	r24, 0xF3	; 243
     fd4:	93 e0       	ldi	r25, 0x03	; 3
     fd6:	97 d3       	rcall	.+1838   	; 0x1706 <Lcd4_Write_String>
     fd8:	2f ef       	ldi	r18, 0xFF	; 255
     fda:	82 e5       	ldi	r24, 0x52	; 82
     fdc:	97 e0       	ldi	r25, 0x07	; 7
     fde:	21 50       	subi	r18, 0x01	; 1
     fe0:	80 40       	sbci	r24, 0x00	; 0
     fe2:	90 40       	sbci	r25, 0x00	; 0
     fe4:	e1 f7       	brne	.-8      	; 0xfde <SetWeight+0x112>
     fe6:	00 c0       	rjmp	.+0      	; 0xfe8 <SetWeight+0x11c>
     fe8:	00 00       	nop
     fea:	85 cf       	rjmp	.-246    	; 0xef6 <SetWeight+0x2a>
			_delay_ms(300);//700
		}
	}
}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <SetCups>:
void SetCups(void)
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
	Lcd4_Clear();
     ff6:	04 d3       	rcall	.+1544   	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	04 d3       	rcall	.+1544   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Cups:");
    1002:	84 e6       	ldi	r24, 0x64	; 100
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	7f d3       	rcall	.+1790   	; 0x1706 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	82 e0       	ldi	r24, 0x02	; 2
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	fc d2       	rcall	.+1528   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("20");
    1012:	8a e6       	ldi	r24, 0x6A	; 106
    1014:	92 e0       	ldi	r25, 0x02	; 2
    1016:	77 d3       	rcall	.+1774   	; 0x1706 <Lcd4_Write_String>
	if (Y_Axis < 5)
    1018:	80 91 ef 03 	lds	r24, 0x03EF	; 0x8003ef <Y_Axis>
    101c:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <Y_Axis+0x1>
    1020:	05 97       	sbiw	r24, 0x05	; 5
    1022:	bc f4       	brge	.+46     	; 0x1052 <SetCups+0x60>
	{
		No_Cups = 12;
    1024:	8c e0       	ldi	r24, 0x0C	; 12
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <No_Cups+0x1>
    102c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <No_Cups>
		Lcd4_Clear();
    1030:	e7 d2       	rcall	.+1486   	; 0x1600 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	e7 d2       	rcall	.+1486   	; 0x160a <Lcd4_Set_Cursor>
		Lcd4_Write_String("Cups:");
    103c:	84 e6       	ldi	r24, 0x64	; 100
    103e:	92 e0       	ldi	r25, 0x02	; 2
    1040:	62 d3       	rcall	.+1732   	; 0x1706 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
    1042:	60 e0       	ldi	r22, 0x00	; 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	df d2       	rcall	.+1470   	; 0x160a <Lcd4_Set_Cursor>
		Lcd4_Write_String("12");
    104c:	8d e6       	ldi	r24, 0x6D	; 109
    104e:	92 e0       	ldi	r25, 0x02	; 2
    1050:	5a d3       	rcall	.+1716   	; 0x1706 <Lcd4_Write_String>
	}
	
	while(1)
	{
		if (!(bit_is_clear(PINL, PL5)))
    1052:	c9 e0       	ldi	r28, 0x09	; 9
    1054:	d1 e0       	ldi	r29, 0x01	; 1
    1056:	88 81       	ld	r24, Y
    1058:	85 fd       	sbrc	r24, 5
    105a:	56 c0       	rjmp	.+172    	; 0x1108 <SetCups+0x116>
		{
			return;
		}
		else if (!(bit_is_clear(PINL, PL6)))//UP
    105c:	88 81       	ld	r24, Y
    105e:	86 ff       	sbrs	r24, 6
    1060:	28 c0       	rjmp	.+80     	; 0x10b2 <SetCups+0xc0>
		{
			No_Cups = No_Cups + 1;
    1062:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <No_Cups>
    1066:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <No_Cups+0x1>
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <No_Cups+0x1>
    1070:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <No_Cups>
    1074:	4a e0       	ldi	r20, 0x0A	; 10
    1076:	63 ef       	ldi	r22, 0xF3	; 243
    1078:	73 e0       	ldi	r23, 0x03	; 3
    107a:	f8 d7       	rcall	.+4080   	; 0x206c <__itoa_ncheck>
			itoa(No_Cups, MyWeight, 10);
			Lcd4_Clear();
    107c:	c1 d2       	rcall	.+1410   	; 0x1600 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	c1 d2       	rcall	.+1410   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Cups:");
    1088:	84 e6       	ldi	r24, 0x64	; 100
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	3c d3       	rcall	.+1656   	; 0x1706 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    108e:	60 e0       	ldi	r22, 0x00	; 0
    1090:	70 e0       	ldi	r23, 0x00	; 0
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	b9 d2       	rcall	.+1394   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
    1098:	83 ef       	ldi	r24, 0xF3	; 243
    109a:	93 e0       	ldi	r25, 0x03	; 3
    109c:	34 d3       	rcall	.+1640   	; 0x1706 <Lcd4_Write_String>
    109e:	2f ef       	ldi	r18, 0xFF	; 255
    10a0:	82 e5       	ldi	r24, 0x52	; 82
    10a2:	97 e0       	ldi	r25, 0x07	; 7
    10a4:	21 50       	subi	r18, 0x01	; 1
    10a6:	80 40       	sbci	r24, 0x00	; 0
    10a8:	90 40       	sbci	r25, 0x00	; 0
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <SetCups+0xb2>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <SetCups+0xbc>
    10ae:	00 00       	nop
    10b0:	d2 cf       	rjmp	.-92     	; 0x1056 <SetCups+0x64>
			_delay_ms(300);//700
		}
		else if (!(bit_is_clear(PINL, PL7)))//DOWN
    10b2:	88 81       	ld	r24, Y
    10b4:	88 23       	and	r24, r24
    10b6:	7c f6       	brge	.-98     	; 0x1056 <SetCups+0x64>
		{
			No_Cups = No_Cups - 1;
    10b8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <No_Cups>
    10bc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <No_Cups+0x1>
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <No_Cups+0x1>
    10c6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <No_Cups>
    10ca:	4a e0       	ldi	r20, 0x0A	; 10
    10cc:	63 ef       	ldi	r22, 0xF3	; 243
    10ce:	73 e0       	ldi	r23, 0x03	; 3
    10d0:	cd d7       	rcall	.+3994   	; 0x206c <__itoa_ncheck>
			itoa(No_Cups, MyWeight, 10);
			Lcd4_Clear();
    10d2:	96 d2       	rcall	.+1324   	; 0x1600 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	96 d2       	rcall	.+1324   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Cups:");
    10de:	84 e6       	ldi	r24, 0x64	; 100
    10e0:	92 e0       	ldi	r25, 0x02	; 2
    10e2:	11 d3       	rcall	.+1570   	; 0x1706 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	8e d2       	rcall	.+1308   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String(MyWeight);
    10ee:	83 ef       	ldi	r24, 0xF3	; 243
    10f0:	93 e0       	ldi	r25, 0x03	; 3
    10f2:	09 d3       	rcall	.+1554   	; 0x1706 <Lcd4_Write_String>
    10f4:	2f ef       	ldi	r18, 0xFF	; 255
    10f6:	82 e5       	ldi	r24, 0x52	; 82
    10f8:	97 e0       	ldi	r25, 0x07	; 7
    10fa:	21 50       	subi	r18, 0x01	; 1
    10fc:	80 40       	sbci	r24, 0x00	; 0
    10fe:	90 40       	sbci	r25, 0x00	; 0
    1100:	e1 f7       	brne	.-8      	; 0x10fa <SetCups+0x108>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <SetCups+0x112>
    1104:	00 00       	nop
    1106:	a7 cf       	rjmp	.-178    	; 0x1056 <SetCups+0x64>
			_delay_ms(300);//700
		}
	}
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <SetCapacity>:
void SetCapacity(void)
{
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
	Lcd4_Clear();
    1112:	76 d2       	rcall	.+1260   	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	76 d2       	rcall	.+1260   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Capacity:");
    111e:	80 e7       	ldi	r24, 0x70	; 112
    1120:	92 e0       	ldi	r25, 0x02	; 2
    1122:	f1 d2       	rcall	.+1506   	; 0x1706 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	6e d2       	rcall	.+1244   	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Full");
    112e:	8a e7       	ldi	r24, 0x7A	; 122
    1130:	92 e0       	ldi	r25, 0x02	; 2
    1132:	e9 d2       	rcall	.+1490   	; 0x1706 <Lcd4_Write_String>
	while(1)
	{
		if (!(bit_is_clear(PINL, PL5)))
    1134:	c9 e0       	ldi	r28, 0x09	; 9
    1136:	d1 e0       	ldi	r29, 0x01	; 1
    1138:	88 81       	ld	r24, Y
    113a:	85 fd       	sbrc	r24, 5
    113c:	46 c0       	rjmp	.+140    	; 0x11ca <SetCapacity+0xbc>
		{
			return;
		}
		else if (!(bit_is_clear(PINL, PL6)))//UP
    113e:	88 81       	ld	r24, Y
    1140:	86 ff       	sbrs	r24, 6
    1142:	21 c0       	rjmp	.+66     	; 0x1186 <SetCapacity+0x78>
		{
			Capacity = 1;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <Capacity+0x1>
    114c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <Capacity>
			Lcd4_Clear();
    1150:	57 d2       	rcall	.+1198   	; 0x1600 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	57 d2       	rcall	.+1198   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Capacity:");
    115c:	80 e7       	ldi	r24, 0x70	; 112
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	d2 d2       	rcall	.+1444   	; 0x1706 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	4f d2       	rcall	.+1182   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Full");
    116c:	8a e7       	ldi	r24, 0x7A	; 122
    116e:	92 e0       	ldi	r25, 0x02	; 2
    1170:	ca d2       	rcall	.+1428   	; 0x1706 <Lcd4_Write_String>
    1172:	2f ef       	ldi	r18, 0xFF	; 255
    1174:	82 e5       	ldi	r24, 0x52	; 82
    1176:	97 e0       	ldi	r25, 0x07	; 7
    1178:	21 50       	subi	r18, 0x01	; 1
    117a:	80 40       	sbci	r24, 0x00	; 0
    117c:	90 40       	sbci	r25, 0x00	; 0
    117e:	e1 f7       	brne	.-8      	; 0x1178 <SetCapacity+0x6a>
    1180:	00 c0       	rjmp	.+0      	; 0x1182 <SetCapacity+0x74>
    1182:	00 00       	nop
    1184:	d9 cf       	rjmp	.-78     	; 0x1138 <SetCapacity+0x2a>
			_delay_ms(300);//700
		}
		else if (!(bit_is_clear(PINL, PL7)))//DOWN
    1186:	88 81       	ld	r24, Y
    1188:	88 23       	and	r24, r24
    118a:	b4 f6       	brge	.-84     	; 0x1138 <SetCapacity+0x2a>
		{
			Capacity = 0;
    118c:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <Capacity+0x1>
    1190:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <Capacity>
			Lcd4_Clear();
    1194:	35 d2       	rcall	.+1130   	; 0x1600 <Lcd4_Clear>
			Lcd4_Set_Cursor(1,0);
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	35 d2       	rcall	.+1130   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Capacity:");
    11a0:	80 e7       	ldi	r24, 0x70	; 112
    11a2:	92 e0       	ldi	r25, 0x02	; 2
    11a4:	b0 d2       	rcall	.+1376   	; 0x1706 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	2d d2       	rcall	.+1114   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("Half");
    11b0:	8f e7       	ldi	r24, 0x7F	; 127
    11b2:	92 e0       	ldi	r25, 0x02	; 2
    11b4:	a8 d2       	rcall	.+1360   	; 0x1706 <Lcd4_Write_String>
    11b6:	2f ef       	ldi	r18, 0xFF	; 255
    11b8:	82 e5       	ldi	r24, 0x52	; 82
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	21 50       	subi	r18, 0x01	; 1
    11be:	80 40       	sbci	r24, 0x00	; 0
    11c0:	90 40       	sbci	r25, 0x00	; 0
    11c2:	e1 f7       	brne	.-8      	; 0x11bc <SetCapacity+0xae>
    11c4:	00 c0       	rjmp	.+0      	; 0x11c6 <SetCapacity+0xb8>
    11c6:	00 00       	nop
    11c8:	b7 cf       	rjmp	.-146    	; 0x1138 <SetCapacity+0x2a>
			_delay_ms(300);//700
		}
	}
}
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <Hardware_Init>:
}
unsigned char USART_Receive( void )
{
	while ( !(UCSR0A & (1<<RXC0)) );         // Wait for data to be received
	return UDR0;                             // Get and return received data from buffer
}
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	97 b9       	out	0x07, r25	; 7
    11d4:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
    11d8:	81 ee       	ldi	r24, 0xE1	; 225
    11da:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x70010a>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
    11e4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
    11e8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
    11ec:	90 bb       	out	0x10, r25	; 16
    11ee:	11 ba       	out	0x11, r1	; 17
    11f0:	84 b9       	out	0x04, r24	; 4
    11f2:	85 b9       	out	0x05, r24	; 5
    11f4:	8d b9       	out	0x0d, r24	; 13
    11f6:	8e b9       	out	0x0e, r24	; 14
    11f8:	08 95       	ret

000011fa <USART_Init>:
    11fa:	e1 e6       	ldi	r30, 0x61	; 97
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 e8       	ldi	r24, 0x80	; 128
    1200:	80 83       	st	Z, r24
    1202:	10 82       	st	Z, r1
    1204:	08 95       	ret

00001206 <InitTimer1>:
void InitTimer1()// MOTOR X
{
	//sei();
	//cli();//clear, off interrupt
	
	TCCR1A = 0x80;//8k
    1206:	80 e8       	ldi	r24, 0x80	; 128
    1208:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
	TCCR1B = 0x09;
    120c:	89 e0       	ldi	r24, 0x09	; 9
    120e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
	OCR1AH = 0x03;
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
	OCR1AL = 0xE7;
    1218:	87 ee       	ldi	r24, 0xE7	; 231
    121a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	//OCR1A = 65000;
	//OCR1AH = 0x01;
	//OCR1AL = 0x8F;
	//OCR1AH = 0x00;
	//OCR1AL = 0x00;
	TIMSK1 |= (1 << OCIE1A);//set
    121e:	ef e6       	ldi	r30, 0x6F	; 111
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	82 60       	ori	r24, 0x02	; 2
    1226:	80 83       	st	Z, r24
	//TCCR1B |= (1 << CS10);// set up timer with prescaler = 0
	TCNT1 = 0;// initialize counter
    1228:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
    122c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
    1230:	08 95       	ret

00001232 <InitTimer3>:
	//TIMSK1 |= (1 << TOIE1);// enable overflow interrupt
}
void InitTimer3()// MOTOR Y
{
	TCCR3A = 0x80;//400hz
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
	TCCR3B = 0x0C;
    1238:	8c e0       	ldi	r24, 0x0C	; 12
    123a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
	OCR3AH = 0x00;
    123e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x700099>
	OCR3AL = 0x4D;
    1242:	8d e4       	ldi	r24, 0x4D	; 77
    1244:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x700098>
	TIMSK3 |= (1 << OCIE3A);
    1248:	e1 e7       	ldi	r30, 0x71	; 113
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	82 60       	ori	r24, 0x02	; 2
    1250:	80 83       	st	Z, r24
	TCNT3 = 0;// initialize counter
    1252:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x700095>
    1256:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x700094>
    125a:	08 95       	ret

0000125c <InitTimer4>:
}
void InitTimer4 ()
{
	TCCR4A = 0x80;
    125c:	80 e8       	ldi	r24, 0x80	; 128
    125e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
	TCCR4B = 0x0D;
    1262:	8d e0       	ldi	r24, 0x0D	; 13
    1264:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	OCR4AH = 0x00;
    1268:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
	OCR4AL = 0x9B;
    126c:	8b e9       	ldi	r24, 0x9B	; 155
    126e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
	TIMSK4 |= (1 << OCIE4A);//set
    1272:	e2 e7       	ldi	r30, 0x72	; 114
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	82 60       	ori	r24, 0x02	; 2
    127a:	80 83       	st	Z, r24
	TCNT4 = 0;
    127c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7000a5>
    1280:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7000a4>
    1284:	08 95       	ret

00001286 <pinChange>:
	Lcd4_Write_String("OUT");
	_delay_ms(2000);
	while (1)
	{
		//X_Axis_Step_Plus_TMP();
	}
    1286:	67 2b       	or	r22, r23
    1288:	09 f0       	breq	.+2      	; 0x128c <pinChange+0x6>
    128a:	b1 c0       	rjmp	.+354    	; 0x13ee <pinChange+0x168>
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	11 f4       	brne	.+4      	; 0x1294 <pinChange+0xe>
    1290:	10 98       	cbi	0x02, 0	; 2
    1292:	08 95       	ret
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	91 05       	cpc	r25, r1
    1298:	11 f4       	brne	.+4      	; 0x129e <pinChange+0x18>
    129a:	11 98       	cbi	0x02, 1	; 2
    129c:	08 95       	ret
    129e:	82 30       	cpi	r24, 0x02	; 2
    12a0:	91 05       	cpc	r25, r1
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <pinChange+0x22>
    12a4:	12 98       	cbi	0x02, 2	; 2
    12a6:	08 95       	ret
    12a8:	83 30       	cpi	r24, 0x03	; 3
    12aa:	91 05       	cpc	r25, r1
    12ac:	11 f4       	brne	.+4      	; 0x12b2 <pinChange+0x2c>
    12ae:	13 98       	cbi	0x02, 3	; 2
    12b0:	08 95       	ret
    12b2:	84 30       	cpi	r24, 0x04	; 4
    12b4:	91 05       	cpc	r25, r1
    12b6:	11 f4       	brne	.+4      	; 0x12bc <pinChange+0x36>
    12b8:	14 98       	cbi	0x02, 4	; 2
    12ba:	08 95       	ret
    12bc:	85 30       	cpi	r24, 0x05	; 5
    12be:	91 05       	cpc	r25, r1
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <pinChange+0x40>
    12c2:	15 98       	cbi	0x02, 5	; 2
    12c4:	08 95       	ret
    12c6:	86 30       	cpi	r24, 0x06	; 6
    12c8:	91 05       	cpc	r25, r1
    12ca:	11 f4       	brne	.+4      	; 0x12d0 <pinChange+0x4a>
    12cc:	16 98       	cbi	0x02, 6	; 2
    12ce:	08 95       	ret
    12d0:	87 30       	cpi	r24, 0x07	; 7
    12d2:	91 05       	cpc	r25, r1
    12d4:	11 f4       	brne	.+4      	; 0x12da <pinChange+0x54>
    12d6:	17 98       	cbi	0x02, 7	; 2
    12d8:	08 95       	ret
    12da:	8a 30       	cpi	r24, 0x0A	; 10
    12dc:	91 05       	cpc	r25, r1
    12de:	11 f4       	brne	.+4      	; 0x12e4 <pinChange+0x5e>
    12e0:	28 98       	cbi	0x05, 0	; 5
    12e2:	08 95       	ret
    12e4:	8b 30       	cpi	r24, 0x0B	; 11
    12e6:	91 05       	cpc	r25, r1
    12e8:	11 f4       	brne	.+4      	; 0x12ee <pinChange+0x68>
    12ea:	29 98       	cbi	0x05, 1	; 5
    12ec:	08 95       	ret
    12ee:	8c 30       	cpi	r24, 0x0C	; 12
    12f0:	91 05       	cpc	r25, r1
    12f2:	11 f4       	brne	.+4      	; 0x12f8 <pinChange+0x72>
    12f4:	2a 98       	cbi	0x05, 2	; 5
    12f6:	08 95       	ret
    12f8:	8d 30       	cpi	r24, 0x0D	; 13
    12fa:	91 05       	cpc	r25, r1
    12fc:	11 f4       	brne	.+4      	; 0x1302 <pinChange+0x7c>
    12fe:	2b 98       	cbi	0x05, 3	; 5
    1300:	08 95       	ret
    1302:	8e 30       	cpi	r24, 0x0E	; 14
    1304:	91 05       	cpc	r25, r1
    1306:	11 f4       	brne	.+4      	; 0x130c <pinChange+0x86>
    1308:	2c 98       	cbi	0x05, 4	; 5
    130a:	08 95       	ret
    130c:	8f 30       	cpi	r24, 0x0F	; 15
    130e:	91 05       	cpc	r25, r1
    1310:	11 f4       	brne	.+4      	; 0x1316 <pinChange+0x90>
    1312:	2d 98       	cbi	0x05, 5	; 5
    1314:	08 95       	ret
    1316:	80 31       	cpi	r24, 0x10	; 16
    1318:	91 05       	cpc	r25, r1
    131a:	11 f4       	brne	.+4      	; 0x1320 <pinChange+0x9a>
    131c:	2e 98       	cbi	0x05, 6	; 5
    131e:	08 95       	ret
    1320:	81 31       	cpi	r24, 0x11	; 17
    1322:	91 05       	cpc	r25, r1
    1324:	11 f4       	brne	.+4      	; 0x132a <pinChange+0xa4>
    1326:	2f 98       	cbi	0x05, 7	; 5
    1328:	08 95       	ret
    132a:	84 31       	cpi	r24, 0x14	; 20
    132c:	91 05       	cpc	r25, r1
    132e:	11 f4       	brne	.+4      	; 0x1334 <pinChange+0xae>
    1330:	40 98       	cbi	0x08, 0	; 8
    1332:	08 95       	ret
    1334:	85 31       	cpi	r24, 0x15	; 21
    1336:	91 05       	cpc	r25, r1
    1338:	11 f4       	brne	.+4      	; 0x133e <pinChange+0xb8>
    133a:	41 98       	cbi	0x08, 1	; 8
    133c:	08 95       	ret
    133e:	86 31       	cpi	r24, 0x16	; 22
    1340:	91 05       	cpc	r25, r1
    1342:	11 f4       	brne	.+4      	; 0x1348 <pinChange+0xc2>
    1344:	42 98       	cbi	0x08, 2	; 8
    1346:	08 95       	ret
    1348:	87 31       	cpi	r24, 0x17	; 23
    134a:	91 05       	cpc	r25, r1
    134c:	11 f4       	brne	.+4      	; 0x1352 <pinChange+0xcc>
    134e:	43 98       	cbi	0x08, 3	; 8
    1350:	08 95       	ret
    1352:	88 31       	cpi	r24, 0x18	; 24
    1354:	91 05       	cpc	r25, r1
    1356:	11 f4       	brne	.+4      	; 0x135c <pinChange+0xd6>
    1358:	44 98       	cbi	0x08, 4	; 8
    135a:	08 95       	ret
    135c:	89 31       	cpi	r24, 0x19	; 25
    135e:	91 05       	cpc	r25, r1
    1360:	11 f4       	brne	.+4      	; 0x1366 <pinChange+0xe0>
    1362:	45 98       	cbi	0x08, 5	; 8
    1364:	08 95       	ret
    1366:	8a 31       	cpi	r24, 0x1A	; 26
    1368:	91 05       	cpc	r25, r1
    136a:	11 f4       	brne	.+4      	; 0x1370 <pinChange+0xea>
    136c:	46 98       	cbi	0x08, 6	; 8
    136e:	08 95       	ret
    1370:	8b 31       	cpi	r24, 0x1B	; 27
    1372:	91 05       	cpc	r25, r1
    1374:	11 f4       	brne	.+4      	; 0x137a <pinChange+0xf4>
    1376:	47 98       	cbi	0x08, 7	; 8
    1378:	08 95       	ret
    137a:	8e 31       	cpi	r24, 0x1E	; 30
    137c:	91 05       	cpc	r25, r1
    137e:	11 f4       	brne	.+4      	; 0x1384 <pinChange+0xfe>
    1380:	58 98       	cbi	0x0b, 0	; 11
    1382:	08 95       	ret
    1384:	8f 31       	cpi	r24, 0x1F	; 31
    1386:	91 05       	cpc	r25, r1
    1388:	11 f4       	brne	.+4      	; 0x138e <pinChange+0x108>
    138a:	59 98       	cbi	0x0b, 1	; 11
    138c:	08 95       	ret
    138e:	80 32       	cpi	r24, 0x20	; 32
    1390:	91 05       	cpc	r25, r1
    1392:	11 f4       	brne	.+4      	; 0x1398 <pinChange+0x112>
    1394:	5a 98       	cbi	0x0b, 2	; 11
    1396:	08 95       	ret
    1398:	81 32       	cpi	r24, 0x21	; 33
    139a:	91 05       	cpc	r25, r1
    139c:	11 f4       	brne	.+4      	; 0x13a2 <pinChange+0x11c>
    139e:	5b 98       	cbi	0x0b, 3	; 11
    13a0:	08 95       	ret
    13a2:	82 32       	cpi	r24, 0x22	; 34
    13a4:	91 05       	cpc	r25, r1
    13a6:	11 f4       	brne	.+4      	; 0x13ac <pinChange+0x126>
    13a8:	5c 98       	cbi	0x0b, 4	; 11
    13aa:	08 95       	ret
    13ac:	83 32       	cpi	r24, 0x23	; 35
    13ae:	91 05       	cpc	r25, r1
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <pinChange+0x130>
    13b2:	5d 98       	cbi	0x0b, 5	; 11
    13b4:	08 95       	ret
    13b6:	84 32       	cpi	r24, 0x24	; 36
    13b8:	91 05       	cpc	r25, r1
    13ba:	11 f4       	brne	.+4      	; 0x13c0 <pinChange+0x13a>
    13bc:	5e 98       	cbi	0x0b, 6	; 11
    13be:	08 95       	ret
    13c0:	85 32       	cpi	r24, 0x25	; 37
    13c2:	91 05       	cpc	r25, r1
    13c4:	11 f4       	brne	.+4      	; 0x13ca <pinChange+0x144>
    13c6:	5f 98       	cbi	0x0b, 7	; 11
    13c8:	08 95       	ret
    13ca:	86 32       	cpi	r24, 0x26	; 38
    13cc:	91 05       	cpc	r25, r1
    13ce:	31 f4       	brne	.+12     	; 0x13dc <pinChange+0x156>
    13d0:	e5 e0       	ldi	r30, 0x05	; 5
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	80 81       	ld	r24, Z
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	80 83       	st	Z, r24
    13da:	08 95       	ret
    13dc:	87 97       	sbiw	r24, 0x27	; 39
    13de:	09 f0       	breq	.+2      	; 0x13e2 <pinChange+0x15c>
    13e0:	b5 c0       	rjmp	.+362    	; 0x154c <pinChange+0x2c6>
    13e2:	e5 e0       	ldi	r30, 0x05	; 5
    13e4:	f1 e0       	ldi	r31, 0x01	; 1
    13e6:	80 81       	ld	r24, Z
    13e8:	8d 7f       	andi	r24, 0xFD	; 253
    13ea:	80 83       	st	Z, r24
    13ec:	08 95       	ret
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <pinChange+0x170>
    13f2:	10 9a       	sbi	0x02, 0	; 2
    13f4:	08 95       	ret
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	91 05       	cpc	r25, r1
    13fa:	11 f4       	brne	.+4      	; 0x1400 <pinChange+0x17a>
    13fc:	11 9a       	sbi	0x02, 1	; 2
    13fe:	08 95       	ret
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	91 05       	cpc	r25, r1
    1404:	11 f4       	brne	.+4      	; 0x140a <pinChange+0x184>
    1406:	12 9a       	sbi	0x02, 2	; 2
    1408:	08 95       	ret
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	91 05       	cpc	r25, r1
    140e:	11 f4       	brne	.+4      	; 0x1414 <pinChange+0x18e>
    1410:	13 9a       	sbi	0x02, 3	; 2
    1412:	08 95       	ret
    1414:	84 30       	cpi	r24, 0x04	; 4
    1416:	91 05       	cpc	r25, r1
    1418:	11 f4       	brne	.+4      	; 0x141e <pinChange+0x198>
    141a:	14 9a       	sbi	0x02, 4	; 2
    141c:	08 95       	ret
    141e:	85 30       	cpi	r24, 0x05	; 5
    1420:	91 05       	cpc	r25, r1
    1422:	11 f4       	brne	.+4      	; 0x1428 <pinChange+0x1a2>
    1424:	15 9a       	sbi	0x02, 5	; 2
    1426:	08 95       	ret
    1428:	86 30       	cpi	r24, 0x06	; 6
    142a:	91 05       	cpc	r25, r1
    142c:	11 f4       	brne	.+4      	; 0x1432 <pinChange+0x1ac>
    142e:	16 9a       	sbi	0x02, 6	; 2
    1430:	08 95       	ret
    1432:	87 30       	cpi	r24, 0x07	; 7
    1434:	91 05       	cpc	r25, r1
    1436:	11 f4       	brne	.+4      	; 0x143c <pinChange+0x1b6>
    1438:	17 9a       	sbi	0x02, 7	; 2
    143a:	08 95       	ret
    143c:	8a 30       	cpi	r24, 0x0A	; 10
    143e:	91 05       	cpc	r25, r1
    1440:	11 f4       	brne	.+4      	; 0x1446 <pinChange+0x1c0>
    1442:	28 9a       	sbi	0x05, 0	; 5
    1444:	08 95       	ret
    1446:	8b 30       	cpi	r24, 0x0B	; 11
    1448:	91 05       	cpc	r25, r1
    144a:	11 f4       	brne	.+4      	; 0x1450 <pinChange+0x1ca>
    144c:	29 9a       	sbi	0x05, 1	; 5
    144e:	08 95       	ret
    1450:	8c 30       	cpi	r24, 0x0C	; 12
    1452:	91 05       	cpc	r25, r1
    1454:	11 f4       	brne	.+4      	; 0x145a <pinChange+0x1d4>
    1456:	2a 9a       	sbi	0x05, 2	; 5
    1458:	08 95       	ret
    145a:	8d 30       	cpi	r24, 0x0D	; 13
    145c:	91 05       	cpc	r25, r1
    145e:	11 f4       	brne	.+4      	; 0x1464 <pinChange+0x1de>
    1460:	2b 9a       	sbi	0x05, 3	; 5
    1462:	08 95       	ret
    1464:	8e 30       	cpi	r24, 0x0E	; 14
    1466:	91 05       	cpc	r25, r1
    1468:	11 f4       	brne	.+4      	; 0x146e <pinChange+0x1e8>
    146a:	2c 9a       	sbi	0x05, 4	; 5
    146c:	08 95       	ret
    146e:	8f 30       	cpi	r24, 0x0F	; 15
    1470:	91 05       	cpc	r25, r1
    1472:	11 f4       	brne	.+4      	; 0x1478 <pinChange+0x1f2>
    1474:	2d 9a       	sbi	0x05, 5	; 5
    1476:	08 95       	ret
    1478:	80 31       	cpi	r24, 0x10	; 16
    147a:	91 05       	cpc	r25, r1
    147c:	11 f4       	brne	.+4      	; 0x1482 <pinChange+0x1fc>
    147e:	2e 9a       	sbi	0x05, 6	; 5
    1480:	08 95       	ret
    1482:	81 31       	cpi	r24, 0x11	; 17
    1484:	91 05       	cpc	r25, r1
    1486:	11 f4       	brne	.+4      	; 0x148c <pinChange+0x206>
    1488:	2f 9a       	sbi	0x05, 7	; 5
    148a:	08 95       	ret
    148c:	84 31       	cpi	r24, 0x14	; 20
    148e:	91 05       	cpc	r25, r1
    1490:	11 f4       	brne	.+4      	; 0x1496 <pinChange+0x210>
    1492:	40 9a       	sbi	0x08, 0	; 8
    1494:	08 95       	ret
    1496:	85 31       	cpi	r24, 0x15	; 21
    1498:	91 05       	cpc	r25, r1
    149a:	11 f4       	brne	.+4      	; 0x14a0 <pinChange+0x21a>
    149c:	41 9a       	sbi	0x08, 1	; 8
    149e:	08 95       	ret
    14a0:	86 31       	cpi	r24, 0x16	; 22
    14a2:	91 05       	cpc	r25, r1
    14a4:	11 f4       	brne	.+4      	; 0x14aa <pinChange+0x224>
    14a6:	42 9a       	sbi	0x08, 2	; 8
    14a8:	08 95       	ret
    14aa:	87 31       	cpi	r24, 0x17	; 23
    14ac:	91 05       	cpc	r25, r1
    14ae:	11 f4       	brne	.+4      	; 0x14b4 <pinChange+0x22e>
    14b0:	43 9a       	sbi	0x08, 3	; 8
    14b2:	08 95       	ret
    14b4:	88 31       	cpi	r24, 0x18	; 24
    14b6:	91 05       	cpc	r25, r1
    14b8:	11 f4       	brne	.+4      	; 0x14be <pinChange+0x238>
    14ba:	44 9a       	sbi	0x08, 4	; 8
    14bc:	08 95       	ret
    14be:	89 31       	cpi	r24, 0x19	; 25
    14c0:	91 05       	cpc	r25, r1
    14c2:	11 f4       	brne	.+4      	; 0x14c8 <pinChange+0x242>
    14c4:	45 9a       	sbi	0x08, 5	; 8
    14c6:	08 95       	ret
    14c8:	8a 31       	cpi	r24, 0x1A	; 26
    14ca:	91 05       	cpc	r25, r1
    14cc:	11 f4       	brne	.+4      	; 0x14d2 <pinChange+0x24c>
    14ce:	46 9a       	sbi	0x08, 6	; 8
    14d0:	08 95       	ret
    14d2:	8b 31       	cpi	r24, 0x1B	; 27
    14d4:	91 05       	cpc	r25, r1
    14d6:	11 f4       	brne	.+4      	; 0x14dc <pinChange+0x256>
    14d8:	47 9a       	sbi	0x08, 7	; 8
    14da:	08 95       	ret
    14dc:	8e 31       	cpi	r24, 0x1E	; 30
    14de:	91 05       	cpc	r25, r1
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <pinChange+0x260>
    14e2:	58 9a       	sbi	0x0b, 0	; 11
    14e4:	08 95       	ret
    14e6:	8f 31       	cpi	r24, 0x1F	; 31
    14e8:	91 05       	cpc	r25, r1
    14ea:	11 f4       	brne	.+4      	; 0x14f0 <pinChange+0x26a>
    14ec:	59 9a       	sbi	0x0b, 1	; 11
    14ee:	08 95       	ret
    14f0:	80 32       	cpi	r24, 0x20	; 32
    14f2:	91 05       	cpc	r25, r1
    14f4:	11 f4       	brne	.+4      	; 0x14fa <pinChange+0x274>
    14f6:	5a 9a       	sbi	0x0b, 2	; 11
    14f8:	08 95       	ret
    14fa:	81 32       	cpi	r24, 0x21	; 33
    14fc:	91 05       	cpc	r25, r1
    14fe:	11 f4       	brne	.+4      	; 0x1504 <pinChange+0x27e>
    1500:	5b 9a       	sbi	0x0b, 3	; 11
    1502:	08 95       	ret
    1504:	82 32       	cpi	r24, 0x22	; 34
    1506:	91 05       	cpc	r25, r1
    1508:	11 f4       	brne	.+4      	; 0x150e <pinChange+0x288>
    150a:	5c 9a       	sbi	0x0b, 4	; 11
    150c:	08 95       	ret
    150e:	83 32       	cpi	r24, 0x23	; 35
    1510:	91 05       	cpc	r25, r1
    1512:	11 f4       	brne	.+4      	; 0x1518 <pinChange+0x292>
    1514:	5d 9a       	sbi	0x0b, 5	; 11
    1516:	08 95       	ret
    1518:	84 32       	cpi	r24, 0x24	; 36
    151a:	91 05       	cpc	r25, r1
    151c:	11 f4       	brne	.+4      	; 0x1522 <pinChange+0x29c>
    151e:	5e 9a       	sbi	0x0b, 6	; 11
    1520:	08 95       	ret
    1522:	85 32       	cpi	r24, 0x25	; 37
    1524:	91 05       	cpc	r25, r1
    1526:	11 f4       	brne	.+4      	; 0x152c <pinChange+0x2a6>
    1528:	5f 9a       	sbi	0x0b, 7	; 11
    152a:	08 95       	ret
    152c:	86 32       	cpi	r24, 0x26	; 38
    152e:	91 05       	cpc	r25, r1
    1530:	31 f4       	brne	.+12     	; 0x153e <pinChange+0x2b8>
    1532:	e5 e0       	ldi	r30, 0x05	; 5
    1534:	f1 e0       	ldi	r31, 0x01	; 1
    1536:	80 81       	ld	r24, Z
    1538:	81 60       	ori	r24, 0x01	; 1
    153a:	80 83       	st	Z, r24
    153c:	08 95       	ret
    153e:	87 97       	sbiw	r24, 0x27	; 39
    1540:	29 f4       	brne	.+10     	; 0x154c <pinChange+0x2c6>
    1542:	e5 e0       	ldi	r30, 0x05	; 5
    1544:	f1 e0       	ldi	r31, 0x01	; 1
    1546:	80 81       	ld	r24, Z
    1548:	82 60       	ori	r24, 0x02	; 2
    154a:	80 83       	st	Z, r24
    154c:	08 95       	ret

0000154e <Lcd4_Port>:
    154e:	cf 93       	push	r28
    1550:	c8 2f       	mov	r28, r24
    1552:	80 ff       	sbrs	r24, 0
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <Lcd4_Port+0x14>
    1556:	61 e0       	ldi	r22, 0x01	; 1
    1558:	70 e0       	ldi	r23, 0x00	; 0
    155a:	84 e1       	ldi	r24, 0x14	; 20
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	93 de       	rcall	.-730    	; 0x1286 <pinChange>
    1560:	05 c0       	rjmp	.+10     	; 0x156c <Lcd4_Port+0x1e>
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	84 e1       	ldi	r24, 0x14	; 20
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	8d de       	rcall	.-742    	; 0x1286 <pinChange>
    156c:	c1 ff       	sbrs	r28, 1
    156e:	06 c0       	rjmp	.+12     	; 0x157c <Lcd4_Port+0x2e>
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	85 e1       	ldi	r24, 0x15	; 21
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	86 de       	rcall	.-756    	; 0x1286 <pinChange>
    157a:	05 c0       	rjmp	.+10     	; 0x1586 <Lcd4_Port+0x38>
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	85 e1       	ldi	r24, 0x15	; 21
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	80 de       	rcall	.-768    	; 0x1286 <pinChange>
    1586:	c2 ff       	sbrs	r28, 2
    1588:	06 c0       	rjmp	.+12     	; 0x1596 <Lcd4_Port+0x48>
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	86 e1       	ldi	r24, 0x16	; 22
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	79 de       	rcall	.-782    	; 0x1286 <pinChange>
    1594:	05 c0       	rjmp	.+10     	; 0x15a0 <Lcd4_Port+0x52>
    1596:	60 e0       	ldi	r22, 0x00	; 0
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	86 e1       	ldi	r24, 0x16	; 22
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	73 de       	rcall	.-794    	; 0x1286 <pinChange>
    15a0:	c3 ff       	sbrs	r28, 3
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <Lcd4_Port+0x62>
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	87 e1       	ldi	r24, 0x17	; 23
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	6c de       	rcall	.-808    	; 0x1286 <pinChange>
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <Lcd4_Port+0x6c>
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	87 e1       	ldi	r24, 0x17	; 23
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	66 de       	rcall	.-820    	; 0x1286 <pinChange>
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <Lcd4_Cmd>:
    15be:	cf 93       	push	r28
    15c0:	c8 2f       	mov	r28, r24
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	70 e0       	ldi	r23, 0x00	; 0
    15c6:	86 e2       	ldi	r24, 0x26	; 38
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	5d de       	rcall	.-838    	; 0x1286 <pinChange>
    15cc:	8c 2f       	mov	r24, r28
    15ce:	bf df       	rcall	.-130    	; 0x154e <Lcd4_Port>
    15d0:	61 e0       	ldi	r22, 0x01	; 1
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	87 e2       	ldi	r24, 0x27	; 39
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	56 de       	rcall	.-852    	; 0x1286 <pinChange>
    15da:	8f ec       	ldi	r24, 0xCF	; 207
    15dc:	97 e0       	ldi	r25, 0x07	; 7
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	f1 f7       	brne	.-4      	; 0x15de <Lcd4_Cmd+0x20>
    15e2:	00 c0       	rjmp	.+0      	; 0x15e4 <Lcd4_Cmd+0x26>
    15e4:	00 00       	nop
    15e6:	60 e0       	ldi	r22, 0x00	; 0
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	87 e2       	ldi	r24, 0x27	; 39
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	4b de       	rcall	.-874    	; 0x1286 <pinChange>
    15f0:	8f ec       	ldi	r24, 0xCF	; 207
    15f2:	97 e0       	ldi	r25, 0x07	; 7
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <Lcd4_Cmd+0x36>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <Lcd4_Cmd+0x3c>
    15fa:	00 00       	nop
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <Lcd4_Clear>:
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	dd df       	rcall	.-70     	; 0x15be <Lcd4_Cmd>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	db cf       	rjmp	.-74     	; 0x15be <Lcd4_Cmd>
    1608:	08 95       	ret

0000160a <Lcd4_Set_Cursor>:
    160a:	cf 93       	push	r28
    160c:	c6 2f       	mov	r28, r22
    160e:	81 30       	cpi	r24, 0x01	; 1
    1610:	49 f4       	brne	.+18     	; 0x1624 <Lcd4_Set_Cursor+0x1a>
    1612:	80 e8       	ldi	r24, 0x80	; 128
    1614:	86 0f       	add	r24, r22
    1616:	82 95       	swap	r24
    1618:	8f 70       	andi	r24, 0x0F	; 15
    161a:	d1 df       	rcall	.-94     	; 0x15be <Lcd4_Cmd>
    161c:	8c 2f       	mov	r24, r28
    161e:	8f 70       	andi	r24, 0x0F	; 15
    1620:	ce df       	rcall	.-100    	; 0x15be <Lcd4_Cmd>
    1622:	0a c0       	rjmp	.+20     	; 0x1638 <Lcd4_Set_Cursor+0x2e>
    1624:	82 30       	cpi	r24, 0x02	; 2
    1626:	41 f4       	brne	.+16     	; 0x1638 <Lcd4_Set_Cursor+0x2e>
    1628:	80 ec       	ldi	r24, 0xC0	; 192
    162a:	86 0f       	add	r24, r22
    162c:	82 95       	swap	r24
    162e:	8f 70       	andi	r24, 0x0F	; 15
    1630:	c6 df       	rcall	.-116    	; 0x15be <Lcd4_Cmd>
    1632:	8c 2f       	mov	r24, r28
    1634:	8f 70       	andi	r24, 0x0F	; 15
    1636:	c3 df       	rcall	.-122    	; 0x15be <Lcd4_Cmd>
    1638:	cf 91       	pop	r28
    163a:	08 95       	ret

0000163c <Lcd4_Init>:
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	87 df       	rcall	.-242    	; 0x154e <Lcd4_Port>
    1640:	8f e3       	ldi	r24, 0x3F	; 63
    1642:	9c e9       	ldi	r25, 0x9C	; 156
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <Lcd4_Init+0x8>
    1648:	00 c0       	rjmp	.+0      	; 0x164a <Lcd4_Init+0xe>
    164a:	00 00       	nop
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	b7 df       	rcall	.-146    	; 0x15be <Lcd4_Cmd>
    1650:	8f e0       	ldi	r24, 0x0F	; 15
    1652:	97 e2       	ldi	r25, 0x27	; 39
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <Lcd4_Init+0x18>
    1658:	00 c0       	rjmp	.+0      	; 0x165a <Lcd4_Init+0x1e>
    165a:	00 00       	nop
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	af df       	rcall	.-162    	; 0x15be <Lcd4_Cmd>
    1660:	8f ee       	ldi	r24, 0xEF	; 239
    1662:	95 e5       	ldi	r25, 0x55	; 85
    1664:	01 97       	sbiw	r24, 0x01	; 1
    1666:	f1 f7       	brne	.-4      	; 0x1664 <Lcd4_Init+0x28>
    1668:	00 c0       	rjmp	.+0      	; 0x166a <Lcd4_Init+0x2e>
    166a:	00 00       	nop
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	a7 df       	rcall	.-178    	; 0x15be <Lcd4_Cmd>
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	a5 df       	rcall	.-182    	; 0x15be <Lcd4_Cmd>
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	a3 df       	rcall	.-186    	; 0x15be <Lcd4_Cmd>
    1678:	88 e0       	ldi	r24, 0x08	; 8
    167a:	a1 df       	rcall	.-190    	; 0x15be <Lcd4_Cmd>
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	9f df       	rcall	.-194    	; 0x15be <Lcd4_Cmd>
    1680:	8c e0       	ldi	r24, 0x0C	; 12
    1682:	9d df       	rcall	.-198    	; 0x15be <Lcd4_Cmd>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	9b df       	rcall	.-202    	; 0x15be <Lcd4_Cmd>
    1688:	86 e0       	ldi	r24, 0x06	; 6
    168a:	99 cf       	rjmp	.-206    	; 0x15be <Lcd4_Cmd>
    168c:	08 95       	ret

0000168e <Lcd4_Write_Char>:
    168e:	cf 93       	push	r28
    1690:	c8 2f       	mov	r28, r24
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	86 e2       	ldi	r24, 0x26	; 38
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	f5 dd       	rcall	.-1046   	; 0x1286 <pinChange>
    169c:	8c 2f       	mov	r24, r28
    169e:	82 95       	swap	r24
    16a0:	8f 70       	andi	r24, 0x0F	; 15
    16a2:	55 df       	rcall	.-342    	; 0x154e <Lcd4_Port>
    16a4:	61 e0       	ldi	r22, 0x01	; 1
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	87 e2       	ldi	r24, 0x27	; 39
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	ec dd       	rcall	.-1064   	; 0x1286 <pinChange>
    16ae:	8f ec       	ldi	r24, 0xCF	; 207
    16b0:	97 e0       	ldi	r25, 0x07	; 7
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <Lcd4_Write_Char+0x24>
    16b6:	00 c0       	rjmp	.+0      	; 0x16b8 <Lcd4_Write_Char+0x2a>
    16b8:	00 00       	nop
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	87 e2       	ldi	r24, 0x27	; 39
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	e1 dd       	rcall	.-1086   	; 0x1286 <pinChange>
    16c4:	8f ec       	ldi	r24, 0xCF	; 207
    16c6:	97 e0       	ldi	r25, 0x07	; 7
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <Lcd4_Write_Char+0x3a>
    16cc:	00 c0       	rjmp	.+0      	; 0x16ce <Lcd4_Write_Char+0x40>
    16ce:	00 00       	nop
    16d0:	8c 2f       	mov	r24, r28
    16d2:	8f 70       	andi	r24, 0x0F	; 15
    16d4:	3c df       	rcall	.-392    	; 0x154e <Lcd4_Port>
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	87 e2       	ldi	r24, 0x27	; 39
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	d3 dd       	rcall	.-1114   	; 0x1286 <pinChange>
    16e0:	8f ec       	ldi	r24, 0xCF	; 207
    16e2:	97 e0       	ldi	r25, 0x07	; 7
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <Lcd4_Write_Char+0x56>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <Lcd4_Write_Char+0x5c>
    16ea:	00 00       	nop
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	87 e2       	ldi	r24, 0x27	; 39
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	c8 dd       	rcall	.-1136   	; 0x1286 <pinChange>
    16f6:	8f ec       	ldi	r24, 0xCF	; 207
    16f8:	97 e0       	ldi	r25, 0x07	; 7
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <Lcd4_Write_Char+0x6c>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <Lcd4_Write_Char+0x72>
    1700:	00 00       	nop
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <Lcd4_Write_String>:
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ec 01       	movw	r28, r24
    170c:	88 81       	ld	r24, Y
    170e:	88 23       	and	r24, r24
    1710:	29 f0       	breq	.+10     	; 0x171c <Lcd4_Write_String+0x16>
    1712:	21 96       	adiw	r28, 0x01	; 1
    1714:	bc df       	rcall	.-136    	; 0x168e <Lcd4_Write_Char>
    1716:	89 91       	ld	r24, Y+
    1718:	81 11       	cpse	r24, r1
    171a:	fc cf       	rjmp	.-8      	; 0x1714 <Lcd4_Write_String+0xe>
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <__vector_17>:
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	91 b3       	in	r25, 0x11	; 17
    1732:	82 e0       	ldi	r24, 0x02	; 2
    1734:	89 27       	eor	r24, r25
    1736:	81 bb       	out	0x11, r24	; 17
    1738:	9f 91       	pop	r25
    173a:	8f 91       	pop	r24
    173c:	0f 90       	pop	r0
    173e:	0f be       	out	0x3f, r0	; 63
    1740:	0f 90       	pop	r0
    1742:	1f 90       	pop	r1
    1744:	18 95       	reti

00001746 <__vector_32>:
    1746:	1f 92       	push	r1
    1748:	0f 92       	push	r0
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	0f 92       	push	r0
    174e:	11 24       	eor	r1, r1
    1750:	8f 93       	push	r24
    1752:	9f 93       	push	r25
    1754:	91 b3       	in	r25, 0x11	; 17
    1756:	88 e0       	ldi	r24, 0x08	; 8
    1758:	89 27       	eor	r24, r25
    175a:	81 bb       	out	0x11, r24	; 17
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	0f 90       	pop	r0
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	0f 90       	pop	r0
    1766:	1f 90       	pop	r1
    1768:	18 95       	reti

0000176a <__vector_42>:
    176a:	1f 92       	push	r1
    176c:	0f 92       	push	r0
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	0f 92       	push	r0
    1772:	11 24       	eor	r1, r1
    1774:	0b b6       	in	r0, 0x3b	; 59
    1776:	0f 92       	push	r0
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tot_overflow>
    1794:	8f 5f       	subi	r24, 0xFF	; 255
    1796:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <tot_overflow>
    179a:	f8 94       	cli
    179c:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <tot_overflow>
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	08 f4       	brcc	.+2      	; 0x17a6 <__vector_42+0x3c>
    17a4:	75 c0       	rjmp	.+234    	; 0x1890 <__vector_42+0x126>
    17a6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
    17aa:	84 fd       	sbrc	r24, 4
    17ac:	13 c0       	rjmp	.+38     	; 0x17d4 <__vector_42+0x6a>
    17ae:	81 b3       	in	r24, 0x11	; 17
    17b0:	80 58       	subi	r24, 0x80	; 128
    17b2:	81 bb       	out	0x11, r24	; 17
    17b4:	2f ef       	ldi	r18, 0xFF	; 255
    17b6:	82 e5       	ldi	r24, 0x52	; 82
    17b8:	97 e0       	ldi	r25, 0x07	; 7
    17ba:	21 50       	subi	r18, 0x01	; 1
    17bc:	80 40       	sbci	r24, 0x00	; 0
    17be:	90 40       	sbci	r25, 0x00	; 0
    17c0:	e1 f7       	brne	.-8      	; 0x17ba <__vector_42+0x50>
    17c2:	00 c0       	rjmp	.+0      	; 0x17c4 <__vector_42+0x5a>
    17c4:	00 00       	nop
    17c6:	1c df       	rcall	.-456    	; 0x1600 <Lcd4_Clear>
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	1e df       	rcall	.-452    	; 0x160a <Lcd4_Set_Cursor>
    17ce:	84 e8       	ldi	r24, 0x84	; 132
    17d0:	92 e0       	ldi	r25, 0x02	; 2
    17d2:	99 df       	rcall	.-206    	; 0x1706 <Lcd4_Write_String>
    17d4:	15 df       	rcall	.-470    	; 0x1600 <Lcd4_Clear>
    17d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    17da:	80 ff       	sbrs	r24, 0
    17dc:	11 c0       	rjmp	.+34     	; 0x1800 <__vector_42+0x96>
    17de:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <STOP_X>
    17e2:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <STOP_X+0x1>
    17e6:	89 2b       	or	r24, r25
    17e8:	59 f4       	brne	.+22     	; 0x1800 <__vector_42+0x96>
    17ea:	88 ef       	ldi	r24, 0xF8	; 248
    17ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <STOP_X+0x1>
    17f8:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <STOP_X>
    17fc:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <tot_overflow>
    1800:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1804:	81 ff       	sbrs	r24, 1
    1806:	15 c0       	rjmp	.+42     	; 0x1832 <__vector_42+0xc8>
    1808:	88 ef       	ldi	r24, 0xF8	; 248
    180a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    180e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    1812:	f6 de       	rcall	.-532    	; 0x1600 <Lcd4_Clear>
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	f8 de       	rcall	.-528    	; 0x160a <Lcd4_Set_Cursor>
    181a:	8c e8       	ldi	r24, 0x8C	; 140
    181c:	92 e0       	ldi	r25, 0x02	; 2
    181e:	73 df       	rcall	.-282    	; 0x1706 <Lcd4_Write_String>
    1820:	2f e7       	ldi	r18, 0x7F	; 127
    1822:	88 e3       	ldi	r24, 0x38	; 56
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	21 50       	subi	r18, 0x01	; 1
    1828:	80 40       	sbci	r24, 0x00	; 0
    182a:	90 40       	sbci	r25, 0x00	; 0
    182c:	e1 f7       	brne	.-8      	; 0x1826 <__vector_42+0xbc>
    182e:	00 c0       	rjmp	.+0      	; 0x1830 <__vector_42+0xc6>
    1830:	00 00       	nop
    1832:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1836:	82 ff       	sbrs	r24, 2
    1838:	15 c0       	rjmp	.+42     	; 0x1864 <__vector_42+0xfa>
    183a:	88 ef       	ldi	r24, 0xF8	; 248
    183c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    1840:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x700081>
    1844:	dd de       	rcall	.-582    	; 0x1600 <Lcd4_Clear>
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	df de       	rcall	.-578    	; 0x160a <Lcd4_Set_Cursor>
    184c:	84 e9       	ldi	r24, 0x94	; 148
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	5a df       	rcall	.-332    	; 0x1706 <Lcd4_Write_String>
    1852:	2f e7       	ldi	r18, 0x7F	; 127
    1854:	88 e3       	ldi	r24, 0x38	; 56
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	21 50       	subi	r18, 0x01	; 1
    185a:	80 40       	sbci	r24, 0x00	; 0
    185c:	90 40       	sbci	r25, 0x00	; 0
    185e:	e1 f7       	brne	.-8      	; 0x1858 <__vector_42+0xee>
    1860:	00 c0       	rjmp	.+0      	; 0x1862 <__vector_42+0xf8>
    1862:	00 00       	nop
    1864:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1868:	83 ff       	sbrs	r24, 3
    186a:	11 c0       	rjmp	.+34     	; 0x188e <__vector_42+0x124>
    186c:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <STOP_Y>
    1870:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <STOP_Y+0x1>
    1874:	89 2b       	or	r24, r25
    1876:	59 f4       	brne	.+22     	; 0x188e <__vector_42+0x124>
    1878:	88 ef       	ldi	r24, 0xF8	; 248
    187a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x700091>
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <STOP_Y+0x1>
    1886:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <STOP_Y>
    188a:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <tot_overflow>
    188e:	78 94       	sei
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0b be       	out	0x3b, r0	; 59
    18ac:	0f 90       	pop	r0
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <main>:
	//PORTG = 0xFF;
	//sei();// Enable Interrupt
//}

int main(void)
{
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	60 97       	sbiw	r28, 0x10	; 16
    18c0:	0f b6       	in	r0, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	de bf       	out	0x3e, r29	; 62
    18c6:	0f be       	out	0x3f, r0	; 63
    18c8:	cd bf       	out	0x3d, r28	; 61
    18ca:	8f e1       	ldi	r24, 0x1F	; 31
    18cc:	9e e4       	ldi	r25, 0x4E	; 78
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <main+0x18>
    18d2:	00 c0       	rjmp	.+0      	; 0x18d4 <main+0x1e>
    18d4:	00 00       	nop
	//long temp = 0;
	_delay_ms(10);
	DDRG = 0xFF;//diode
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	83 bb       	out	0x13, r24	; 19
	PORTG = 0x00;
    18da:	14 ba       	out	0x14, r1	; 20
	////InitTimer0();
	InitTimer1();
    18dc:	94 dc       	rcall	.-1752   	; 0x1206 <InitTimer1>
	InitTimer3();
    18de:	a9 dc       	rcall	.-1710   	; 0x1232 <InitTimer3>
	InitTimer4();
    18e0:	bd dc       	rcall	.-1670   	; 0x125c <InitTimer4>
	Hardware_Init();
    18e2:	76 dc       	rcall	.-1812   	; 0x11d0 <Hardware_Init>
	USART_Init();
    18e4:	8a dc       	rcall	.-1772   	; 0x11fa <USART_Init>
	Lcd4_Init();
    18e6:	aa de       	rcall	.-684    	; 0x163c <Lcd4_Init>
    18e8:	9f ef       	ldi	r25, 0xFF	; 255
    18ea:	e0 e7       	ldi	r30, 0x70	; 112
    18ec:	f2 e0       	ldi	r31, 0x02	; 2
    18ee:	91 50       	subi	r25, 0x01	; 1
    18f0:	e0 40       	sbci	r30, 0x00	; 0
    18f2:	f0 40       	sbci	r31, 0x00	; 0
    18f4:	e1 f7       	brne	.-8      	; 0x18ee <main+0x38>
    18f6:	00 c0       	rjmp	.+0      	; 0x18f8 <main+0x42>
    18f8:	00 00       	nop
	
	_delay_ms(100);
	PORTK |= (1 << PK6);//GREEN ON
    18fa:	e8 e0       	ldi	r30, 0x08	; 8
    18fc:	f1 e0       	ldi	r31, 0x01	; 1
    18fe:	80 81       	ld	r24, Z
    1900:	80 64       	ori	r24, 0x40	; 64
    1902:	80 83       	st	Z, r24
	
	Lcd4_Clear();
    1904:	7d de       	rcall	.-774    	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    1906:	60 e0       	ldi	r22, 0x00	; 0
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	7f de       	rcall	.-770    	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("miSRT Machine");
    190c:	8f ea       	ldi	r24, 0xAF	; 175
    190e:	92 e0       	ldi	r25, 0x02	; 2
    1910:	fa de       	rcall	.-524    	; 0x1706 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1912:	60 e0       	ldi	r22, 0x00	; 0
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	79 de       	rcall	.-782    	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Init...");
    1918:	8d eb       	ldi	r24, 0xBD	; 189
    191a:	92 e0       	ldi	r25, 0x02	; 2
    191c:	f4 de       	rcall	.-536    	; 0x1706 <Lcd4_Write_String>
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	83 ed       	ldi	r24, 0xD3	; 211
    1922:	90 e3       	ldi	r25, 0x30	; 48
    1924:	21 50       	subi	r18, 0x01	; 1
    1926:	80 40       	sbci	r24, 0x00	; 0
    1928:	90 40       	sbci	r25, 0x00	; 0
    192a:	e1 f7       	brne	.-8      	; 0x1924 <main+0x6e>
    192c:	00 c0       	rjmp	.+0      	; 0x192e <main+0x78>
    192e:	00 00       	nop
	_delay_ms(2000);
	
	Go_To_Zero_Init();// Set Zero Axis
    1930:	0e 94 2a 01 	call	0x254	; 0x254 <Go_To_Zero_Init>
    1934:	ef e7       	ldi	r30, 0x7F	; 127
    1936:	f8 e3       	ldi	r31, 0x38	; 56
    1938:	21 e0       	ldi	r18, 0x01	; 1
    193a:	e1 50       	subi	r30, 0x01	; 1
    193c:	f0 40       	sbci	r31, 0x00	; 0
    193e:	20 40       	sbci	r18, 0x00	; 0
    1940:	e1 f7       	brne	.-8      	; 0x193a <main+0x84>
    1942:	00 c0       	rjmp	.+0      	; 0x1944 <main+0x8e>
    1944:	00 00       	nop
	_delay_ms(50);
	
	Lcd4_Clear();
    1946:	5c de       	rcall	.-840    	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	5e de       	rcall	.-836    	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("miSRT Ready");
    194e:	85 ec       	ldi	r24, 0xC5	; 197
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	d9 de       	rcall	.-590    	; 0x1706 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	82 e0       	ldi	r24, 0x02	; 2
    1958:	58 de       	rcall	.-848    	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Select Weight:");
    195a:	8c e9       	ldi	r24, 0x9C	; 156
    195c:	92 e0       	ldi	r25, 0x02	; 2
    195e:	d3 de       	rcall	.-602    	; 0x1706 <Lcd4_Write_String>
	
	while ((bit_is_clear(PINL, PL5)))  // Select
    1960:	e9 e0       	ldi	r30, 0x09	; 9
    1962:	f1 e0       	ldi	r31, 0x01	; 1
    1964:	80 81       	ld	r24, Z
    1966:	85 ff       	sbrs	r24, 5
    1968:	fd cf       	rjmp	.-6      	; 0x1964 <main+0xae>
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	92 e5       	ldi	r25, 0x52	; 82
    196e:	e7 e0       	ldi	r30, 0x07	; 7
    1970:	81 50       	subi	r24, 0x01	; 1
    1972:	90 40       	sbci	r25, 0x00	; 0
    1974:	e0 40       	sbci	r30, 0x00	; 0
    1976:	e1 f7       	brne	.-8      	; 0x1970 <main+0xba>
    1978:	00 c0       	rjmp	.+0      	; 0x197a <main+0xc4>
    197a:	00 00       	nop
	
	_delay_ms(300);
	
	//TST_Method();
	
	SetWeight();
    197c:	a7 da       	rcall	.-2738   	; 0xecc <SetWeight>
    197e:	ff ef       	ldi	r31, 0xFF	; 255
    1980:	22 e5       	ldi	r18, 0x52	; 82
    1982:	87 e0       	ldi	r24, 0x07	; 7
    1984:	f1 50       	subi	r31, 0x01	; 1
    1986:	20 40       	sbci	r18, 0x00	; 0
    1988:	80 40       	sbci	r24, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <main+0xce>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <main+0xd8>
    198e:	00 00       	nop
	_delay_ms(300);
	SetCapacity();
    1990:	be db       	rcall	.-2180   	; 0x110e <SetCapacity>
    1992:	9f ef       	ldi	r25, 0xFF	; 255
    1994:	e2 e5       	ldi	r30, 0x52	; 82
    1996:	f7 e0       	ldi	r31, 0x07	; 7
    1998:	91 50       	subi	r25, 0x01	; 1
    199a:	e0 40       	sbci	r30, 0x00	; 0
    199c:	f0 40       	sbci	r31, 0x00	; 0
    199e:	e1 f7       	brne	.-8      	; 0x1998 <main+0xe2>
    19a0:	00 c0       	rjmp	.+0      	; 0x19a2 <main+0xec>
    19a2:	00 00       	nop
	_delay_ms(300);
	SetCups();
    19a4:	26 db       	rcall	.-2484   	; 0xff2 <SetCups>
    19a6:	4a e0       	ldi	r20, 0x0A	; 10
    19a8:	63 e2       	ldi	r22, 0x23	; 35
    19aa:	74 e0       	ldi	r23, 0x04	; 4
    19ac:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <Gram_Target>
    19b0:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <Gram_Target+0x1>
    19b4:	5b d3       	rcall	.+1718   	; 0x206c <__itoa_ncheck>
	
	itoa(Gram_Target, Screen_Buffer, 10);
	Lcd4_Clear();
    19b6:	24 de       	rcall	.-952    	; 0x1600 <Lcd4_Clear>
	Lcd4_Set_Cursor(1,0);
    19b8:	60 e0       	ldi	r22, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	26 de       	rcall	.-948    	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String("Selected Weight:");
    19be:	81 ed       	ldi	r24, 0xD1	; 209
    19c0:	92 e0       	ldi	r25, 0x02	; 2
    19c2:	a1 de       	rcall	.-702    	; 0x1706 <Lcd4_Write_String>
	Lcd4_Set_Cursor(2,0);
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	20 de       	rcall	.-960    	; 0x160a <Lcd4_Set_Cursor>
	Lcd4_Write_String(Screen_Buffer);
    19ca:	83 e2       	ldi	r24, 0x23	; 35
    19cc:	94 e0       	ldi	r25, 0x04	; 4
    19ce:	9b de       	rcall	.-714    	; 0x1706 <Lcd4_Write_String>
    19d0:	2f ef       	ldi	r18, 0xFF	; 255
    19d2:	83 ed       	ldi	r24, 0xD3	; 211
    19d4:	90 e3       	ldi	r25, 0x30	; 48
    19d6:	21 50       	subi	r18, 0x01	; 1
    19d8:	80 40       	sbci	r24, 0x00	; 0
    19da:	90 40       	sbci	r25, 0x00	; 0
    19dc:	e1 f7       	brne	.-8      	; 0x19d6 <main+0x120>
    19de:	00 c0       	rjmp	.+0      	; 0x19e0 <main+0x12a>
    19e0:	00 00       	nop
	_delay_ms(2000);
	
	//ChangeScreen(CountScreen);
	PORTK = (1<<PK5);// Open AIR
    19e2:	80 e2       	ldi	r24, 0x20	; 32
    19e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	Lcd4_Clear();
    19e8:	0b de       	rcall	.-1002   	; 0x1600 <Lcd4_Clear>
	
	while(1)
	{
		while ((bit_is_clear(PINL, PL5)))
    19ea:	09 e0       	ldi	r16, 0x09	; 9
    19ec:	11 e0       	ldi	r17, 0x01	; 1
			Lcd4_Set_Cursor(2,0);
			Lcd4_Write_String(Screen_Buffer);
			_delay_ms(300);
		}
		
		PORTK &= ~(1 << PK6);// Green OFF
    19ee:	68 94       	set
    19f0:	66 24       	eor	r6, r6
    19f2:	63 f8       	bld	r6, 3
    19f4:	77 24       	eor	r7, r7
    19f6:	73 94       	inc	r7
    19f8:	0f 2e       	mov	r0, r31
    19fa:	f8 eb       	ldi	r31, 0xB8	; 184
    19fc:	2f 2e       	mov	r2, r31
    19fe:	f3 e0       	ldi	r31, 0x03	; 3
    1a00:	3f 2e       	mov	r3, r31
    1a02:	f0 2d       	mov	r31, r0
    1a04:	0f 2e       	mov	r0, r31
    1a06:	f0 ee       	ldi	r31, 0xE0	; 224
    1a08:	af 2e       	mov	r10, r31
    1a0a:	f3 e0       	ldi	r31, 0x03	; 3
    1a0c:	bf 2e       	mov	r11, r31
    1a0e:	f0 2d       	mov	r31, r0
    1a10:	0f 2e       	mov	r0, r31
    1a12:	f8 eb       	ldi	r31, 0xB8	; 184
    1a14:	cf 2e       	mov	r12, r31
    1a16:	f3 e0       	ldi	r31, 0x03	; 3
    1a18:	df 2e       	mov	r13, r31
    1a1a:	f0 2d       	mov	r31, r0
			}
			//errorFill_R[i] = 0;
			_delay_ms(500);
		}
		countErrors_R = 0;
		countFill = 1;
    1a1c:	44 24       	eor	r4, r4
    1a1e:	43 94       	inc	r4
    1a20:	51 2c       	mov	r5, r1
    1a22:	36 c0       	rjmp	.+108    	; 0x1a90 <main+0x1da>
	
	while(1)
	{
		while ((bit_is_clear(PINL, PL5)))
		{
			if (!(bit_is_clear(PINL, PL7)))//select new weight  
    1a24:	f8 01       	movw	r30, r16
    1a26:	80 81       	ld	r24, Z
    1a28:	88 23       	and	r24, r24
    1a2a:	ac f4       	brge	.+42     	; 0x1a56 <main+0x1a0>
			{
				SetWeight();
    1a2c:	4f da       	rcall	.-2914   	; 0xecc <SetWeight>
    1a2e:	ff ef       	ldi	r31, 0xFF	; 255
    1a30:	22 e5       	ldi	r18, 0x52	; 82
    1a32:	87 e0       	ldi	r24, 0x07	; 7
    1a34:	f1 50       	subi	r31, 0x01	; 1
    1a36:	20 40       	sbci	r18, 0x00	; 0
    1a38:	80 40       	sbci	r24, 0x00	; 0
    1a3a:	e1 f7       	brne	.-8      	; 0x1a34 <main+0x17e>
    1a3c:	00 c0       	rjmp	.+0      	; 0x1a3e <main+0x188>
    1a3e:	00 00       	nop
				_delay_ms(300);
				SetCapacity();
    1a40:	66 db       	rcall	.-2356   	; 0x110e <SetCapacity>
    1a42:	9f ef       	ldi	r25, 0xFF	; 255
    1a44:	e2 e5       	ldi	r30, 0x52	; 82
    1a46:	f7 e0       	ldi	r31, 0x07	; 7
    1a48:	91 50       	subi	r25, 0x01	; 1
    1a4a:	e0 40       	sbci	r30, 0x00	; 0
    1a4c:	f0 40       	sbci	r31, 0x00	; 0
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <main+0x192>
    1a50:	00 c0       	rjmp	.+0      	; 0x1a52 <main+0x19c>
    1a52:	00 00       	nop
				_delay_ms(300);
				SetCups();
    1a54:	ce da       	rcall	.-2660   	; 0xff2 <SetCups>
    1a56:	4a e0       	ldi	r20, 0x0A	; 10
    1a58:	63 e2       	ldi	r22, 0x23	; 35
    1a5a:	74 e0       	ldi	r23, 0x04	; 4
    1a5c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <Gram_Target>
    1a60:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <Gram_Target+0x1>
    1a64:	03 d3       	rcall	.+1542   	; 0x206c <__itoa_ncheck>
			}
			itoa(Gram_Target, Screen_Buffer, 10);
			Lcd4_Set_Cursor(1,0);
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	cf dd       	rcall	.-1122   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String("New Weight Set:");
    1a6c:	82 ee       	ldi	r24, 0xE2	; 226
    1a6e:	92 e0       	ldi	r25, 0x02	; 2
    1a70:	4a de       	rcall	.-876    	; 0x1706 <Lcd4_Write_String>
			Lcd4_Set_Cursor(2,0);
    1a72:	60 e0       	ldi	r22, 0x00	; 0
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	c9 dd       	rcall	.-1134   	; 0x160a <Lcd4_Set_Cursor>
			Lcd4_Write_String(Screen_Buffer);
    1a78:	83 e2       	ldi	r24, 0x23	; 35
    1a7a:	94 e0       	ldi	r25, 0x04	; 4
    1a7c:	44 de       	rcall	.-888    	; 0x1706 <Lcd4_Write_String>
    1a7e:	2f ef       	ldi	r18, 0xFF	; 255
    1a80:	82 e5       	ldi	r24, 0x52	; 82
    1a82:	97 e0       	ldi	r25, 0x07	; 7
    1a84:	21 50       	subi	r18, 0x01	; 1
    1a86:	80 40       	sbci	r24, 0x00	; 0
    1a88:	90 40       	sbci	r25, 0x00	; 0
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <main+0x1ce>
    1a8c:	00 c0       	rjmp	.+0      	; 0x1a8e <main+0x1d8>
    1a8e:	00 00       	nop
	PORTK = (1<<PK5);// Open AIR
	Lcd4_Clear();
	
	while(1)
	{
		while ((bit_is_clear(PINL, PL5)))
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 81       	ld	r24, Z
    1a94:	85 ff       	sbrs	r24, 5
    1a96:	c6 cf       	rjmp	.-116    	; 0x1a24 <main+0x16e>
			Lcd4_Set_Cursor(2,0);
			Lcd4_Write_String(Screen_Buffer);
			_delay_ms(300);
		}
		
		PORTK &= ~(1 << PK6);// Green OFF
    1a98:	f3 01       	movw	r30, r6
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 7b       	andi	r24, 0xBF	; 191
    1a9e:	80 83       	st	Z, r24
		PORTF |= (1 << PF7);//Red ON
    1aa0:	8f 9a       	sbi	0x11, 7	; 17
					
		Lcd4_Clear();
    1aa2:	ae dd       	rcall	.-1188   	; 0x1600 <Lcd4_Clear>
		Lcd4_Set_Cursor(1,0);
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	b0 dd       	rcall	.-1184   	; 0x160a <Lcd4_Set_Cursor>
		Lcd4_Write_String("Fill:");
    1aaa:	82 ef       	ldi	r24, 0xF2	; 242
    1aac:	92 e0       	ldi	r25, 0x02	; 2
    1aae:	2b de       	rcall	.-938    	; 0x1706 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,0);
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	aa dd       	rcall	.-1196   	; 0x160a <Lcd4_Set_Cursor>
		Lcd4_Write_String(Screen_Buffer);
    1ab6:	83 e2       	ldi	r24, 0x23	; 35
    1ab8:	94 e0       	ldi	r25, 0x04	; 4
    1aba:	25 de       	rcall	.-950    	; 0x1706 <Lcd4_Write_String>
					
		//fill 
		Grams = Gram_Target - 2;
    1abc:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <Gram_Target>
    1ac0:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <Gram_Target+0x1>
    1ac4:	02 97       	sbiw	r24, 0x02	; 2
    1ac6:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <Grams+0x1>
    1aca:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <Grams>
		//X_Axis = 3;// number of positions ???????????????????????????????????????
		//Y_Axis = 5;// never "0"
		Go_To (X_Axis, Y_Axis);
    1ace:	60 91 ef 03 	lds	r22, 0x03EF	; 0x8003ef <Y_Axis>
    1ad2:	70 91 f0 03 	lds	r23, 0x03F0	; 0x8003f0 <Y_Axis+0x1>
    1ad6:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <X_Axis>
    1ada:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <X_Axis+0x1>
    1ade:	86 d8       	rcall	.-3828   	; 0xbec <Go_To>
    1ae0:	8f e1       	ldi	r24, 0x1F	; 31
    1ae2:	9e e4       	ldi	r25, 0x4E	; 78
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <main+0x22e>
    1ae8:	00 c0       	rjmp	.+0      	; 0x1aea <main+0x234>
    1aea:	00 00       	nop
		//
		_delay_ms(10);
		Sum_L = 0;
    1aec:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <Sum_L+0x1>
    1af0:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <Sum_L>
    1af4:	71 01       	movw	r14, r2
    1af6:	47 01       	movw	r8, r14
    1af8:	4a e0       	ldi	r20, 0x0A	; 10
    1afa:	be 01       	movw	r22, r28
    1afc:	6f 5f       	subi	r22, 0xFF	; 255
    1afe:	7f 4f       	sbci	r23, 0xFF	; 255
    1b00:	f7 01       	movw	r30, r14
    1b02:	80 81       	ld	r24, Z
    1b04:	91 81       	ldd	r25, Z+1	; 0x01
    1b06:	b2 d2       	rcall	.+1380   	; 0x206c <__itoa_ncheck>
		char Screen[16];
		for (int i = 0; i < 20; i++)//Left
		{
			itoa(errorFill_L[i], Screen, 10);
			if (errorFill_L[i] > 0)
    1b08:	f7 01       	movw	r30, r14
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	18 16       	cp	r1, r24
    1b10:	19 06       	cpc	r1, r25
    1b12:	a4 f4       	brge	.+40     	; 0x1b3c <main+0x286>
			{
				Lcd4_Clear();
    1b14:	75 dd       	rcall	.-1302   	; 0x1600 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
    1b16:	60 e0       	ldi	r22, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	77 dd       	rcall	.-1298   	; 0x160a <Lcd4_Set_Cursor>
				Lcd4_Write_String("Fail Left On:");
    1b1c:	88 ef       	ldi	r24, 0xF8	; 248
    1b1e:	92 e0       	ldi	r25, 0x02	; 2
    1b20:	f2 dd       	rcall	.-1052   	; 0x1706 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,0);
    1b22:	60 e0       	ldi	r22, 0x00	; 0
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	71 dd       	rcall	.-1310   	; 0x160a <Lcd4_Set_Cursor>
				Lcd4_Write_String(Screen);
    1b28:	ce 01       	movw	r24, r28
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	ec dd       	rcall	.-1064   	; 0x1706 <Lcd4_Write_String>
				while (bit_is_clear(PINL, PL5));
    1b2e:	f8 01       	movw	r30, r16
    1b30:	80 81       	ld	r24, Z
    1b32:	85 ff       	sbrs	r24, 5
    1b34:	fc cf       	rjmp	.-8      	; 0x1b2e <main+0x278>
				errorFill_L[i] = 0;
    1b36:	f4 01       	movw	r30, r8
    1b38:	11 82       	std	Z+1, r1	; 0x01
    1b3a:	10 82       	st	Z, r1
    1b3c:	ff ef       	ldi	r31, 0xFF	; 255
    1b3e:	24 e3       	ldi	r18, 0x34	; 52
    1b40:	8c e0       	ldi	r24, 0x0C	; 12
    1b42:	f1 50       	subi	r31, 0x01	; 1
    1b44:	20 40       	sbci	r18, 0x00	; 0
    1b46:	80 40       	sbci	r24, 0x00	; 0
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <main+0x28c>
    1b4a:	00 c0       	rjmp	.+0      	; 0x1b4c <main+0x296>
    1b4c:	00 00       	nop
    1b4e:	92 e0       	ldi	r25, 0x02	; 2
    1b50:	e9 0e       	add	r14, r25
    1b52:	f1 1c       	adc	r15, r1
		Go_To (X_Axis, Y_Axis);
		//
		_delay_ms(10);
		Sum_L = 0;
		char Screen[16];
		for (int i = 0; i < 20; i++)//Left
    1b54:	ea 14       	cp	r14, r10
    1b56:	fb 04       	cpc	r15, r11
    1b58:	71 f6       	brne	.-100    	; 0x1af6 <main+0x240>
				errorFill_L[i] = 0;
			}
			//errorFill_L[i] = 0;
			_delay_ms(500);
		}
		countErrors_L = 0;
    1b5a:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <countErrors_L+0x1>
    1b5e:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <countErrors_L>
					
		Sum_R = 0;
    1b62:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <Sum_R+0x1>
    1b66:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <Sum_R>
    1b6a:	0f 2e       	mov	r0, r31
    1b6c:	f0 e9       	ldi	r31, 0x90	; 144
    1b6e:	ef 2e       	mov	r14, r31
    1b70:	f3 e0       	ldi	r31, 0x03	; 3
    1b72:	ff 2e       	mov	r15, r31
    1b74:	f0 2d       	mov	r31, r0
    1b76:	47 01       	movw	r8, r14
    1b78:	4a e0       	ldi	r20, 0x0A	; 10
    1b7a:	be 01       	movw	r22, r28
    1b7c:	6f 5f       	subi	r22, 0xFF	; 255
    1b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b80:	f7 01       	movw	r30, r14
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	72 d2       	rcall	.+1252   	; 0x206c <__itoa_ncheck>
		for (int i = 0; i < 20; i++)//Right
		{
			itoa(errorFill_R[i], Screen, 10);
			if (errorFill_R[i] > 0)
    1b88:	f7 01       	movw	r30, r14
    1b8a:	80 81       	ld	r24, Z
    1b8c:	91 81       	ldd	r25, Z+1	; 0x01
    1b8e:	18 16       	cp	r1, r24
    1b90:	19 06       	cpc	r1, r25
    1b92:	a4 f4       	brge	.+40     	; 0x1bbc <main+0x306>
			{
				Lcd4_Clear();
    1b94:	35 dd       	rcall	.-1430   	; 0x1600 <Lcd4_Clear>
				Lcd4_Set_Cursor(1,0);
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	37 dd       	rcall	.-1426   	; 0x160a <Lcd4_Set_Cursor>
				Lcd4_Write_String("Fail Right On:");
    1b9c:	86 e0       	ldi	r24, 0x06	; 6
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	b2 dd       	rcall	.-1180   	; 0x1706 <Lcd4_Write_String>
				Lcd4_Set_Cursor(2,0);
    1ba2:	60 e0       	ldi	r22, 0x00	; 0
    1ba4:	82 e0       	ldi	r24, 0x02	; 2
    1ba6:	31 dd       	rcall	.-1438   	; 0x160a <Lcd4_Set_Cursor>
				Lcd4_Write_String(Screen);
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	ac dd       	rcall	.-1192   	; 0x1706 <Lcd4_Write_String>
				while (bit_is_clear(PINL, PL5));
    1bae:	f8 01       	movw	r30, r16
    1bb0:	80 81       	ld	r24, Z
    1bb2:	85 ff       	sbrs	r24, 5
    1bb4:	fc cf       	rjmp	.-8      	; 0x1bae <main+0x2f8>
				errorFill_R[i] = 0;
    1bb6:	f4 01       	movw	r30, r8
    1bb8:	11 82       	std	Z+1, r1	; 0x01
    1bba:	10 82       	st	Z, r1
    1bbc:	ff ef       	ldi	r31, 0xFF	; 255
    1bbe:	24 e3       	ldi	r18, 0x34	; 52
    1bc0:	8c e0       	ldi	r24, 0x0C	; 12
    1bc2:	f1 50       	subi	r31, 0x01	; 1
    1bc4:	20 40       	sbci	r18, 0x00	; 0
    1bc6:	80 40       	sbci	r24, 0x00	; 0
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <main+0x30c>
    1bca:	00 c0       	rjmp	.+0      	; 0x1bcc <main+0x316>
    1bcc:	00 00       	nop
    1bce:	92 e0       	ldi	r25, 0x02	; 2
    1bd0:	e9 0e       	add	r14, r25
    1bd2:	f1 1c       	adc	r15, r1
			_delay_ms(500);
		}
		countErrors_L = 0;
					
		Sum_R = 0;
		for (int i = 0; i < 20; i++)//Right
    1bd4:	ec 14       	cp	r14, r12
    1bd6:	fd 04       	cpc	r15, r13
    1bd8:	71 f6       	brne	.-100    	; 0x1b76 <main+0x2c0>
				errorFill_R[i] = 0;
			}
			//errorFill_R[i] = 0;
			_delay_ms(500);
		}
		countErrors_R = 0;
    1bda:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <countErrors_R+0x1>
    1bde:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <countErrors_R>
		countFill = 1;
    1be2:	50 92 05 02 	sts	0x0205, r5	; 0x800205 <countFill+0x1>
    1be6:	40 92 04 02 	sts	0x0204, r4	; 0x800204 <countFill>
		//
		STOP_X = 0;
    1bea:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <STOP_X+0x1>
    1bee:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <STOP_X>
		STOP_Y = 0;
    1bf2:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <STOP_Y+0x1>
    1bf6:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <STOP_Y>
    1bfa:	ef ef       	ldi	r30, 0xFF	; 255
    1bfc:	f1 ee       	ldi	r31, 0xE1	; 225
    1bfe:	24 e0       	ldi	r18, 0x04	; 4
    1c00:	e1 50       	subi	r30, 0x01	; 1
    1c02:	f0 40       	sbci	r31, 0x00	; 0
    1c04:	20 40       	sbci	r18, 0x00	; 0
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <main+0x34a>
    1c08:	00 c0       	rjmp	.+0      	; 0x1c0a <main+0x354>
    1c0a:	00 00       	nop
		_delay_ms(200);
		Go_To_Zero_Init();
    1c0c:	0e 94 2a 01 	call	0x254	; 0x254 <Go_To_Zero_Init>
					
		PORTF &= ~(1 << PF7);//Red OFF
    1c10:	8f 98       	cbi	0x11, 7	; 17
		PORTK |= (1 << PK6);// Green ON
    1c12:	f3 01       	movw	r30, r6
    1c14:	80 81       	ld	r24, Z
    1c16:	80 64       	ori	r24, 0x40	; 64
    1c18:	80 83       	st	Z, r24
			//Lcd4_Clear();
			//Lcd4_Set_Cursor(1,0);
			//Lcd4_Write_String("OUT");
			//_delay_ms(2000);
		//}
	}
    1c1a:	3a cf       	rjmp	.-396    	; 0x1a90 <main+0x1da>

00001c1c <__subsf3>:
    1c1c:	50 58       	subi	r21, 0x80	; 128

00001c1e <__addsf3>:
    1c1e:	bb 27       	eor	r27, r27
    1c20:	aa 27       	eor	r26, r26
    1c22:	0e d0       	rcall	.+28     	; 0x1c40 <__addsf3x>
    1c24:	48 c1       	rjmp	.+656    	; 0x1eb6 <__fp_round>
    1c26:	39 d1       	rcall	.+626    	; 0x1e9a <__fp_pscA>
    1c28:	30 f0       	brcs	.+12     	; 0x1c36 <__addsf3+0x18>
    1c2a:	3e d1       	rcall	.+636    	; 0x1ea8 <__fp_pscB>
    1c2c:	20 f0       	brcs	.+8      	; 0x1c36 <__addsf3+0x18>
    1c2e:	31 f4       	brne	.+12     	; 0x1c3c <__addsf3+0x1e>
    1c30:	9f 3f       	cpi	r25, 0xFF	; 255
    1c32:	11 f4       	brne	.+4      	; 0x1c38 <__addsf3+0x1a>
    1c34:	1e f4       	brtc	.+6      	; 0x1c3c <__addsf3+0x1e>
    1c36:	2e c1       	rjmp	.+604    	; 0x1e94 <__fp_nan>
    1c38:	0e f4       	brtc	.+2      	; 0x1c3c <__addsf3+0x1e>
    1c3a:	e0 95       	com	r30
    1c3c:	e7 fb       	bst	r30, 7
    1c3e:	24 c1       	rjmp	.+584    	; 0x1e88 <__fp_inf>

00001c40 <__addsf3x>:
    1c40:	e9 2f       	mov	r30, r25
    1c42:	4a d1       	rcall	.+660    	; 0x1ed8 <__fp_split3>
    1c44:	80 f3       	brcs	.-32     	; 0x1c26 <__addsf3+0x8>
    1c46:	ba 17       	cp	r27, r26
    1c48:	62 07       	cpc	r22, r18
    1c4a:	73 07       	cpc	r23, r19
    1c4c:	84 07       	cpc	r24, r20
    1c4e:	95 07       	cpc	r25, r21
    1c50:	18 f0       	brcs	.+6      	; 0x1c58 <__addsf3x+0x18>
    1c52:	71 f4       	brne	.+28     	; 0x1c70 <__addsf3x+0x30>
    1c54:	9e f5       	brtc	.+102    	; 0x1cbc <__addsf3x+0x7c>
    1c56:	62 c1       	rjmp	.+708    	; 0x1f1c <__fp_zero>
    1c58:	0e f4       	brtc	.+2      	; 0x1c5c <__addsf3x+0x1c>
    1c5a:	e0 95       	com	r30
    1c5c:	0b 2e       	mov	r0, r27
    1c5e:	ba 2f       	mov	r27, r26
    1c60:	a0 2d       	mov	r26, r0
    1c62:	0b 01       	movw	r0, r22
    1c64:	b9 01       	movw	r22, r18
    1c66:	90 01       	movw	r18, r0
    1c68:	0c 01       	movw	r0, r24
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	a0 01       	movw	r20, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	ff 27       	eor	r31, r31
    1c72:	59 1b       	sub	r21, r25
    1c74:	99 f0       	breq	.+38     	; 0x1c9c <__addsf3x+0x5c>
    1c76:	59 3f       	cpi	r21, 0xF9	; 249
    1c78:	50 f4       	brcc	.+20     	; 0x1c8e <__addsf3x+0x4e>
    1c7a:	50 3e       	cpi	r21, 0xE0	; 224
    1c7c:	68 f1       	brcs	.+90     	; 0x1cd8 <__addsf3x+0x98>
    1c7e:	1a 16       	cp	r1, r26
    1c80:	f0 40       	sbci	r31, 0x00	; 0
    1c82:	a2 2f       	mov	r26, r18
    1c84:	23 2f       	mov	r18, r19
    1c86:	34 2f       	mov	r19, r20
    1c88:	44 27       	eor	r20, r20
    1c8a:	58 5f       	subi	r21, 0xF8	; 248
    1c8c:	f3 cf       	rjmp	.-26     	; 0x1c74 <__addsf3x+0x34>
    1c8e:	46 95       	lsr	r20
    1c90:	37 95       	ror	r19
    1c92:	27 95       	ror	r18
    1c94:	a7 95       	ror	r26
    1c96:	f0 40       	sbci	r31, 0x00	; 0
    1c98:	53 95       	inc	r21
    1c9a:	c9 f7       	brne	.-14     	; 0x1c8e <__addsf3x+0x4e>
    1c9c:	7e f4       	brtc	.+30     	; 0x1cbc <__addsf3x+0x7c>
    1c9e:	1f 16       	cp	r1, r31
    1ca0:	ba 0b       	sbc	r27, r26
    1ca2:	62 0b       	sbc	r22, r18
    1ca4:	73 0b       	sbc	r23, r19
    1ca6:	84 0b       	sbc	r24, r20
    1ca8:	ba f0       	brmi	.+46     	; 0x1cd8 <__addsf3x+0x98>
    1caa:	91 50       	subi	r25, 0x01	; 1
    1cac:	a1 f0       	breq	.+40     	; 0x1cd6 <__addsf3x+0x96>
    1cae:	ff 0f       	add	r31, r31
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	66 1f       	adc	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	c2 f7       	brpl	.-16     	; 0x1caa <__addsf3x+0x6a>
    1cba:	0e c0       	rjmp	.+28     	; 0x1cd8 <__addsf3x+0x98>
    1cbc:	ba 0f       	add	r27, r26
    1cbe:	62 1f       	adc	r22, r18
    1cc0:	73 1f       	adc	r23, r19
    1cc2:	84 1f       	adc	r24, r20
    1cc4:	48 f4       	brcc	.+18     	; 0x1cd8 <__addsf3x+0x98>
    1cc6:	87 95       	ror	r24
    1cc8:	77 95       	ror	r23
    1cca:	67 95       	ror	r22
    1ccc:	b7 95       	ror	r27
    1cce:	f7 95       	ror	r31
    1cd0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd2:	08 f0       	brcs	.+2      	; 0x1cd6 <__addsf3x+0x96>
    1cd4:	b3 cf       	rjmp	.-154    	; 0x1c3c <__addsf3+0x1e>
    1cd6:	93 95       	inc	r25
    1cd8:	88 0f       	add	r24, r24
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <__addsf3x+0x9e>
    1cdc:	99 27       	eor	r25, r25
    1cde:	ee 0f       	add	r30, r30
    1ce0:	97 95       	ror	r25
    1ce2:	87 95       	ror	r24
    1ce4:	08 95       	ret

00001ce6 <__divsf3>:
    1ce6:	0c d0       	rcall	.+24     	; 0x1d00 <__divsf3x>
    1ce8:	e6 c0       	rjmp	.+460    	; 0x1eb6 <__fp_round>
    1cea:	de d0       	rcall	.+444    	; 0x1ea8 <__fp_pscB>
    1cec:	40 f0       	brcs	.+16     	; 0x1cfe <__divsf3+0x18>
    1cee:	d5 d0       	rcall	.+426    	; 0x1e9a <__fp_pscA>
    1cf0:	30 f0       	brcs	.+12     	; 0x1cfe <__divsf3+0x18>
    1cf2:	21 f4       	brne	.+8      	; 0x1cfc <__divsf3+0x16>
    1cf4:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf6:	19 f0       	breq	.+6      	; 0x1cfe <__divsf3+0x18>
    1cf8:	c7 c0       	rjmp	.+398    	; 0x1e88 <__fp_inf>
    1cfa:	51 11       	cpse	r21, r1
    1cfc:	10 c1       	rjmp	.+544    	; 0x1f1e <__fp_szero>
    1cfe:	ca c0       	rjmp	.+404    	; 0x1e94 <__fp_nan>

00001d00 <__divsf3x>:
    1d00:	eb d0       	rcall	.+470    	; 0x1ed8 <__fp_split3>
    1d02:	98 f3       	brcs	.-26     	; 0x1cea <__divsf3+0x4>

00001d04 <__divsf3_pse>:
    1d04:	99 23       	and	r25, r25
    1d06:	c9 f3       	breq	.-14     	; 0x1cfa <__divsf3+0x14>
    1d08:	55 23       	and	r21, r21
    1d0a:	b1 f3       	breq	.-20     	; 0x1cf8 <__divsf3+0x12>
    1d0c:	95 1b       	sub	r25, r21
    1d0e:	55 0b       	sbc	r21, r21
    1d10:	bb 27       	eor	r27, r27
    1d12:	aa 27       	eor	r26, r26
    1d14:	62 17       	cp	r22, r18
    1d16:	73 07       	cpc	r23, r19
    1d18:	84 07       	cpc	r24, r20
    1d1a:	38 f0       	brcs	.+14     	; 0x1d2a <__divsf3_pse+0x26>
    1d1c:	9f 5f       	subi	r25, 0xFF	; 255
    1d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d20:	22 0f       	add	r18, r18
    1d22:	33 1f       	adc	r19, r19
    1d24:	44 1f       	adc	r20, r20
    1d26:	aa 1f       	adc	r26, r26
    1d28:	a9 f3       	breq	.-22     	; 0x1d14 <__divsf3_pse+0x10>
    1d2a:	33 d0       	rcall	.+102    	; 0x1d92 <__divsf3_pse+0x8e>
    1d2c:	0e 2e       	mov	r0, r30
    1d2e:	3a f0       	brmi	.+14     	; 0x1d3e <__divsf3_pse+0x3a>
    1d30:	e0 e8       	ldi	r30, 0x80	; 128
    1d32:	30 d0       	rcall	.+96     	; 0x1d94 <__divsf3_pse+0x90>
    1d34:	91 50       	subi	r25, 0x01	; 1
    1d36:	50 40       	sbci	r21, 0x00	; 0
    1d38:	e6 95       	lsr	r30
    1d3a:	00 1c       	adc	r0, r0
    1d3c:	ca f7       	brpl	.-14     	; 0x1d30 <__divsf3_pse+0x2c>
    1d3e:	29 d0       	rcall	.+82     	; 0x1d92 <__divsf3_pse+0x8e>
    1d40:	fe 2f       	mov	r31, r30
    1d42:	27 d0       	rcall	.+78     	; 0x1d92 <__divsf3_pse+0x8e>
    1d44:	66 0f       	add	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	88 1f       	adc	r24, r24
    1d4a:	bb 1f       	adc	r27, r27
    1d4c:	26 17       	cp	r18, r22
    1d4e:	37 07       	cpc	r19, r23
    1d50:	48 07       	cpc	r20, r24
    1d52:	ab 07       	cpc	r26, r27
    1d54:	b0 e8       	ldi	r27, 0x80	; 128
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <__divsf3_pse+0x56>
    1d58:	bb 0b       	sbc	r27, r27
    1d5a:	80 2d       	mov	r24, r0
    1d5c:	bf 01       	movw	r22, r30
    1d5e:	ff 27       	eor	r31, r31
    1d60:	93 58       	subi	r25, 0x83	; 131
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	2a f0       	brmi	.+10     	; 0x1d70 <__divsf3_pse+0x6c>
    1d66:	9e 3f       	cpi	r25, 0xFE	; 254
    1d68:	51 05       	cpc	r21, r1
    1d6a:	68 f0       	brcs	.+26     	; 0x1d86 <__divsf3_pse+0x82>
    1d6c:	8d c0       	rjmp	.+282    	; 0x1e88 <__fp_inf>
    1d6e:	d7 c0       	rjmp	.+430    	; 0x1f1e <__fp_szero>
    1d70:	5f 3f       	cpi	r21, 0xFF	; 255
    1d72:	ec f3       	brlt	.-6      	; 0x1d6e <__divsf3_pse+0x6a>
    1d74:	98 3e       	cpi	r25, 0xE8	; 232
    1d76:	dc f3       	brlt	.-10     	; 0x1d6e <__divsf3_pse+0x6a>
    1d78:	86 95       	lsr	r24
    1d7a:	77 95       	ror	r23
    1d7c:	67 95       	ror	r22
    1d7e:	b7 95       	ror	r27
    1d80:	f7 95       	ror	r31
    1d82:	9f 5f       	subi	r25, 0xFF	; 255
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <__divsf3_pse+0x74>
    1d86:	88 0f       	add	r24, r24
    1d88:	91 1d       	adc	r25, r1
    1d8a:	96 95       	lsr	r25
    1d8c:	87 95       	ror	r24
    1d8e:	97 f9       	bld	r25, 7
    1d90:	08 95       	ret
    1d92:	e1 e0       	ldi	r30, 0x01	; 1
    1d94:	66 0f       	add	r22, r22
    1d96:	77 1f       	adc	r23, r23
    1d98:	88 1f       	adc	r24, r24
    1d9a:	bb 1f       	adc	r27, r27
    1d9c:	62 17       	cp	r22, r18
    1d9e:	73 07       	cpc	r23, r19
    1da0:	84 07       	cpc	r24, r20
    1da2:	ba 07       	cpc	r27, r26
    1da4:	20 f0       	brcs	.+8      	; 0x1dae <__divsf3_pse+0xaa>
    1da6:	62 1b       	sub	r22, r18
    1da8:	73 0b       	sbc	r23, r19
    1daa:	84 0b       	sbc	r24, r20
    1dac:	ba 0b       	sbc	r27, r26
    1dae:	ee 1f       	adc	r30, r30
    1db0:	88 f7       	brcc	.-30     	; 0x1d94 <__divsf3_pse+0x90>
    1db2:	e0 95       	com	r30
    1db4:	08 95       	ret

00001db6 <__fixunssfsi>:
    1db6:	98 d0       	rcall	.+304    	; 0x1ee8 <__fp_splitA>
    1db8:	88 f0       	brcs	.+34     	; 0x1ddc <__fixunssfsi+0x26>
    1dba:	9f 57       	subi	r25, 0x7F	; 127
    1dbc:	90 f0       	brcs	.+36     	; 0x1de2 <__fixunssfsi+0x2c>
    1dbe:	b9 2f       	mov	r27, r25
    1dc0:	99 27       	eor	r25, r25
    1dc2:	b7 51       	subi	r27, 0x17	; 23
    1dc4:	a0 f0       	brcs	.+40     	; 0x1dee <__fixunssfsi+0x38>
    1dc6:	d1 f0       	breq	.+52     	; 0x1dfc <__fixunssfsi+0x46>
    1dc8:	66 0f       	add	r22, r22
    1dca:	77 1f       	adc	r23, r23
    1dcc:	88 1f       	adc	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	1a f0       	brmi	.+6      	; 0x1dd8 <__fixunssfsi+0x22>
    1dd2:	ba 95       	dec	r27
    1dd4:	c9 f7       	brne	.-14     	; 0x1dc8 <__fixunssfsi+0x12>
    1dd6:	12 c0       	rjmp	.+36     	; 0x1dfc <__fixunssfsi+0x46>
    1dd8:	b1 30       	cpi	r27, 0x01	; 1
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <__fixunssfsi+0x46>
    1ddc:	9f d0       	rcall	.+318    	; 0x1f1c <__fp_zero>
    1dde:	b1 e0       	ldi	r27, 0x01	; 1
    1de0:	08 95       	ret
    1de2:	9c c0       	rjmp	.+312    	; 0x1f1c <__fp_zero>
    1de4:	67 2f       	mov	r22, r23
    1de6:	78 2f       	mov	r23, r24
    1de8:	88 27       	eor	r24, r24
    1dea:	b8 5f       	subi	r27, 0xF8	; 248
    1dec:	39 f0       	breq	.+14     	; 0x1dfc <__fixunssfsi+0x46>
    1dee:	b9 3f       	cpi	r27, 0xF9	; 249
    1df0:	cc f3       	brlt	.-14     	; 0x1de4 <__fixunssfsi+0x2e>
    1df2:	86 95       	lsr	r24
    1df4:	77 95       	ror	r23
    1df6:	67 95       	ror	r22
    1df8:	b3 95       	inc	r27
    1dfa:	d9 f7       	brne	.-10     	; 0x1df2 <__fixunssfsi+0x3c>
    1dfc:	3e f4       	brtc	.+14     	; 0x1e0c <__fixunssfsi+0x56>
    1dfe:	90 95       	com	r25
    1e00:	80 95       	com	r24
    1e02:	70 95       	com	r23
    1e04:	61 95       	neg	r22
    1e06:	7f 4f       	sbci	r23, 0xFF	; 255
    1e08:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0c:	08 95       	ret

00001e0e <__floatunsisf>:
    1e0e:	e8 94       	clt
    1e10:	09 c0       	rjmp	.+18     	; 0x1e24 <__floatsisf+0x12>

00001e12 <__floatsisf>:
    1e12:	97 fb       	bst	r25, 7
    1e14:	3e f4       	brtc	.+14     	; 0x1e24 <__floatsisf+0x12>
    1e16:	90 95       	com	r25
    1e18:	80 95       	com	r24
    1e1a:	70 95       	com	r23
    1e1c:	61 95       	neg	r22
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	8f 4f       	sbci	r24, 0xFF	; 255
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	99 23       	and	r25, r25
    1e26:	a9 f0       	breq	.+42     	; 0x1e52 <__floatsisf+0x40>
    1e28:	f9 2f       	mov	r31, r25
    1e2a:	96 e9       	ldi	r25, 0x96	; 150
    1e2c:	bb 27       	eor	r27, r27
    1e2e:	93 95       	inc	r25
    1e30:	f6 95       	lsr	r31
    1e32:	87 95       	ror	r24
    1e34:	77 95       	ror	r23
    1e36:	67 95       	ror	r22
    1e38:	b7 95       	ror	r27
    1e3a:	f1 11       	cpse	r31, r1
    1e3c:	f8 cf       	rjmp	.-16     	; 0x1e2e <__floatsisf+0x1c>
    1e3e:	fa f4       	brpl	.+62     	; 0x1e7e <__floatsisf+0x6c>
    1e40:	bb 0f       	add	r27, r27
    1e42:	11 f4       	brne	.+4      	; 0x1e48 <__floatsisf+0x36>
    1e44:	60 ff       	sbrs	r22, 0
    1e46:	1b c0       	rjmp	.+54     	; 0x1e7e <__floatsisf+0x6c>
    1e48:	6f 5f       	subi	r22, 0xFF	; 255
    1e4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	16 c0       	rjmp	.+44     	; 0x1e7e <__floatsisf+0x6c>
    1e52:	88 23       	and	r24, r24
    1e54:	11 f0       	breq	.+4      	; 0x1e5a <__floatsisf+0x48>
    1e56:	96 e9       	ldi	r25, 0x96	; 150
    1e58:	11 c0       	rjmp	.+34     	; 0x1e7c <__floatsisf+0x6a>
    1e5a:	77 23       	and	r23, r23
    1e5c:	21 f0       	breq	.+8      	; 0x1e66 <__floatsisf+0x54>
    1e5e:	9e e8       	ldi	r25, 0x8E	; 142
    1e60:	87 2f       	mov	r24, r23
    1e62:	76 2f       	mov	r23, r22
    1e64:	05 c0       	rjmp	.+10     	; 0x1e70 <__floatsisf+0x5e>
    1e66:	66 23       	and	r22, r22
    1e68:	71 f0       	breq	.+28     	; 0x1e86 <__floatsisf+0x74>
    1e6a:	96 e8       	ldi	r25, 0x86	; 134
    1e6c:	86 2f       	mov	r24, r22
    1e6e:	70 e0       	ldi	r23, 0x00	; 0
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	2a f0       	brmi	.+10     	; 0x1e7e <__floatsisf+0x6c>
    1e74:	9a 95       	dec	r25
    1e76:	66 0f       	add	r22, r22
    1e78:	77 1f       	adc	r23, r23
    1e7a:	88 1f       	adc	r24, r24
    1e7c:	da f7       	brpl	.-10     	; 0x1e74 <__floatsisf+0x62>
    1e7e:	88 0f       	add	r24, r24
    1e80:	96 95       	lsr	r25
    1e82:	87 95       	ror	r24
    1e84:	97 f9       	bld	r25, 7
    1e86:	08 95       	ret

00001e88 <__fp_inf>:
    1e88:	97 f9       	bld	r25, 7
    1e8a:	9f 67       	ori	r25, 0x7F	; 127
    1e8c:	80 e8       	ldi	r24, 0x80	; 128
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	08 95       	ret

00001e94 <__fp_nan>:
    1e94:	9f ef       	ldi	r25, 0xFF	; 255
    1e96:	80 ec       	ldi	r24, 0xC0	; 192
    1e98:	08 95       	ret

00001e9a <__fp_pscA>:
    1e9a:	00 24       	eor	r0, r0
    1e9c:	0a 94       	dec	r0
    1e9e:	16 16       	cp	r1, r22
    1ea0:	17 06       	cpc	r1, r23
    1ea2:	18 06       	cpc	r1, r24
    1ea4:	09 06       	cpc	r0, r25
    1ea6:	08 95       	ret

00001ea8 <__fp_pscB>:
    1ea8:	00 24       	eor	r0, r0
    1eaa:	0a 94       	dec	r0
    1eac:	12 16       	cp	r1, r18
    1eae:	13 06       	cpc	r1, r19
    1eb0:	14 06       	cpc	r1, r20
    1eb2:	05 06       	cpc	r0, r21
    1eb4:	08 95       	ret

00001eb6 <__fp_round>:
    1eb6:	09 2e       	mov	r0, r25
    1eb8:	03 94       	inc	r0
    1eba:	00 0c       	add	r0, r0
    1ebc:	11 f4       	brne	.+4      	; 0x1ec2 <__fp_round+0xc>
    1ebe:	88 23       	and	r24, r24
    1ec0:	52 f0       	brmi	.+20     	; 0x1ed6 <__fp_round+0x20>
    1ec2:	bb 0f       	add	r27, r27
    1ec4:	40 f4       	brcc	.+16     	; 0x1ed6 <__fp_round+0x20>
    1ec6:	bf 2b       	or	r27, r31
    1ec8:	11 f4       	brne	.+4      	; 0x1ece <__fp_round+0x18>
    1eca:	60 ff       	sbrs	r22, 0
    1ecc:	04 c0       	rjmp	.+8      	; 0x1ed6 <__fp_round+0x20>
    1ece:	6f 5f       	subi	r22, 0xFF	; 255
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed6:	08 95       	ret

00001ed8 <__fp_split3>:
    1ed8:	57 fd       	sbrc	r21, 7
    1eda:	90 58       	subi	r25, 0x80	; 128
    1edc:	44 0f       	add	r20, r20
    1ede:	55 1f       	adc	r21, r21
    1ee0:	59 f0       	breq	.+22     	; 0x1ef8 <__fp_splitA+0x10>
    1ee2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ee4:	71 f0       	breq	.+28     	; 0x1f02 <__fp_splitA+0x1a>
    1ee6:	47 95       	ror	r20

00001ee8 <__fp_splitA>:
    1ee8:	88 0f       	add	r24, r24
    1eea:	97 fb       	bst	r25, 7
    1eec:	99 1f       	adc	r25, r25
    1eee:	61 f0       	breq	.+24     	; 0x1f08 <__fp_splitA+0x20>
    1ef0:	9f 3f       	cpi	r25, 0xFF	; 255
    1ef2:	79 f0       	breq	.+30     	; 0x1f12 <__fp_splitA+0x2a>
    1ef4:	87 95       	ror	r24
    1ef6:	08 95       	ret
    1ef8:	12 16       	cp	r1, r18
    1efa:	13 06       	cpc	r1, r19
    1efc:	14 06       	cpc	r1, r20
    1efe:	55 1f       	adc	r21, r21
    1f00:	f2 cf       	rjmp	.-28     	; 0x1ee6 <__fp_split3+0xe>
    1f02:	46 95       	lsr	r20
    1f04:	f1 df       	rcall	.-30     	; 0x1ee8 <__fp_splitA>
    1f06:	08 c0       	rjmp	.+16     	; 0x1f18 <__fp_splitA+0x30>
    1f08:	16 16       	cp	r1, r22
    1f0a:	17 06       	cpc	r1, r23
    1f0c:	18 06       	cpc	r1, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	f1 cf       	rjmp	.-30     	; 0x1ef4 <__fp_splitA+0xc>
    1f12:	86 95       	lsr	r24
    1f14:	71 05       	cpc	r23, r1
    1f16:	61 05       	cpc	r22, r1
    1f18:	08 94       	sec
    1f1a:	08 95       	ret

00001f1c <__fp_zero>:
    1f1c:	e8 94       	clt

00001f1e <__fp_szero>:
    1f1e:	bb 27       	eor	r27, r27
    1f20:	66 27       	eor	r22, r22
    1f22:	77 27       	eor	r23, r23
    1f24:	cb 01       	movw	r24, r22
    1f26:	97 f9       	bld	r25, 7
    1f28:	08 95       	ret

00001f2a <__mulsf3>:
    1f2a:	0b d0       	rcall	.+22     	; 0x1f42 <__mulsf3x>
    1f2c:	c4 cf       	rjmp	.-120    	; 0x1eb6 <__fp_round>
    1f2e:	b5 df       	rcall	.-150    	; 0x1e9a <__fp_pscA>
    1f30:	28 f0       	brcs	.+10     	; 0x1f3c <__mulsf3+0x12>
    1f32:	ba df       	rcall	.-140    	; 0x1ea8 <__fp_pscB>
    1f34:	18 f0       	brcs	.+6      	; 0x1f3c <__mulsf3+0x12>
    1f36:	95 23       	and	r25, r21
    1f38:	09 f0       	breq	.+2      	; 0x1f3c <__mulsf3+0x12>
    1f3a:	a6 cf       	rjmp	.-180    	; 0x1e88 <__fp_inf>
    1f3c:	ab cf       	rjmp	.-170    	; 0x1e94 <__fp_nan>
    1f3e:	11 24       	eor	r1, r1
    1f40:	ee cf       	rjmp	.-36     	; 0x1f1e <__fp_szero>

00001f42 <__mulsf3x>:
    1f42:	ca df       	rcall	.-108    	; 0x1ed8 <__fp_split3>
    1f44:	a0 f3       	brcs	.-24     	; 0x1f2e <__mulsf3+0x4>

00001f46 <__mulsf3_pse>:
    1f46:	95 9f       	mul	r25, r21
    1f48:	d1 f3       	breq	.-12     	; 0x1f3e <__mulsf3+0x14>
    1f4a:	95 0f       	add	r25, r21
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	55 1f       	adc	r21, r21
    1f50:	62 9f       	mul	r22, r18
    1f52:	f0 01       	movw	r30, r0
    1f54:	72 9f       	mul	r23, r18
    1f56:	bb 27       	eor	r27, r27
    1f58:	f0 0d       	add	r31, r0
    1f5a:	b1 1d       	adc	r27, r1
    1f5c:	63 9f       	mul	r22, r19
    1f5e:	aa 27       	eor	r26, r26
    1f60:	f0 0d       	add	r31, r0
    1f62:	b1 1d       	adc	r27, r1
    1f64:	aa 1f       	adc	r26, r26
    1f66:	64 9f       	mul	r22, r20
    1f68:	66 27       	eor	r22, r22
    1f6a:	b0 0d       	add	r27, r0
    1f6c:	a1 1d       	adc	r26, r1
    1f6e:	66 1f       	adc	r22, r22
    1f70:	82 9f       	mul	r24, r18
    1f72:	22 27       	eor	r18, r18
    1f74:	b0 0d       	add	r27, r0
    1f76:	a1 1d       	adc	r26, r1
    1f78:	62 1f       	adc	r22, r18
    1f7a:	73 9f       	mul	r23, r19
    1f7c:	b0 0d       	add	r27, r0
    1f7e:	a1 1d       	adc	r26, r1
    1f80:	62 1f       	adc	r22, r18
    1f82:	83 9f       	mul	r24, r19
    1f84:	a0 0d       	add	r26, r0
    1f86:	61 1d       	adc	r22, r1
    1f88:	22 1f       	adc	r18, r18
    1f8a:	74 9f       	mul	r23, r20
    1f8c:	33 27       	eor	r19, r19
    1f8e:	a0 0d       	add	r26, r0
    1f90:	61 1d       	adc	r22, r1
    1f92:	23 1f       	adc	r18, r19
    1f94:	84 9f       	mul	r24, r20
    1f96:	60 0d       	add	r22, r0
    1f98:	21 1d       	adc	r18, r1
    1f9a:	82 2f       	mov	r24, r18
    1f9c:	76 2f       	mov	r23, r22
    1f9e:	6a 2f       	mov	r22, r26
    1fa0:	11 24       	eor	r1, r1
    1fa2:	9f 57       	subi	r25, 0x7F	; 127
    1fa4:	50 40       	sbci	r21, 0x00	; 0
    1fa6:	8a f0       	brmi	.+34     	; 0x1fca <__mulsf3_pse+0x84>
    1fa8:	e1 f0       	breq	.+56     	; 0x1fe2 <__mulsf3_pse+0x9c>
    1faa:	88 23       	and	r24, r24
    1fac:	4a f0       	brmi	.+18     	; 0x1fc0 <__mulsf3_pse+0x7a>
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	bb 1f       	adc	r27, r27
    1fb4:	66 1f       	adc	r22, r22
    1fb6:	77 1f       	adc	r23, r23
    1fb8:	88 1f       	adc	r24, r24
    1fba:	91 50       	subi	r25, 0x01	; 1
    1fbc:	50 40       	sbci	r21, 0x00	; 0
    1fbe:	a9 f7       	brne	.-22     	; 0x1faa <__mulsf3_pse+0x64>
    1fc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1fc2:	51 05       	cpc	r21, r1
    1fc4:	70 f0       	brcs	.+28     	; 0x1fe2 <__mulsf3_pse+0x9c>
    1fc6:	60 cf       	rjmp	.-320    	; 0x1e88 <__fp_inf>
    1fc8:	aa cf       	rjmp	.-172    	; 0x1f1e <__fp_szero>
    1fca:	5f 3f       	cpi	r21, 0xFF	; 255
    1fcc:	ec f3       	brlt	.-6      	; 0x1fc8 <__mulsf3_pse+0x82>
    1fce:	98 3e       	cpi	r25, 0xE8	; 232
    1fd0:	dc f3       	brlt	.-10     	; 0x1fc8 <__mulsf3_pse+0x82>
    1fd2:	86 95       	lsr	r24
    1fd4:	77 95       	ror	r23
    1fd6:	67 95       	ror	r22
    1fd8:	b7 95       	ror	r27
    1fda:	f7 95       	ror	r31
    1fdc:	e7 95       	ror	r30
    1fde:	9f 5f       	subi	r25, 0xFF	; 255
    1fe0:	c1 f7       	brne	.-16     	; 0x1fd2 <__mulsf3_pse+0x8c>
    1fe2:	fe 2b       	or	r31, r30
    1fe4:	88 0f       	add	r24, r24
    1fe6:	91 1d       	adc	r25, r1
    1fe8:	96 95       	lsr	r25
    1fea:	87 95       	ror	r24
    1fec:	97 f9       	bld	r25, 7
    1fee:	08 95       	ret

00001ff0 <__divmodsi4>:
    1ff0:	05 2e       	mov	r0, r21
    1ff2:	97 fb       	bst	r25, 7
    1ff4:	16 f4       	brtc	.+4      	; 0x1ffa <__divmodsi4+0xa>
    1ff6:	00 94       	com	r0
    1ff8:	0f d0       	rcall	.+30     	; 0x2018 <__negsi2>
    1ffa:	57 fd       	sbrc	r21, 7
    1ffc:	05 d0       	rcall	.+10     	; 0x2008 <__divmodsi4_neg2>
    1ffe:	14 d0       	rcall	.+40     	; 0x2028 <__udivmodsi4>
    2000:	07 fc       	sbrc	r0, 7
    2002:	02 d0       	rcall	.+4      	; 0x2008 <__divmodsi4_neg2>
    2004:	46 f4       	brtc	.+16     	; 0x2016 <__divmodsi4_exit>
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <__negsi2>

00002008 <__divmodsi4_neg2>:
    2008:	50 95       	com	r21
    200a:	40 95       	com	r20
    200c:	30 95       	com	r19
    200e:	21 95       	neg	r18
    2010:	3f 4f       	sbci	r19, 0xFF	; 255
    2012:	4f 4f       	sbci	r20, 0xFF	; 255
    2014:	5f 4f       	sbci	r21, 0xFF	; 255

00002016 <__divmodsi4_exit>:
    2016:	08 95       	ret

00002018 <__negsi2>:
    2018:	90 95       	com	r25
    201a:	80 95       	com	r24
    201c:	70 95       	com	r23
    201e:	61 95       	neg	r22
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	8f 4f       	sbci	r24, 0xFF	; 255
    2024:	9f 4f       	sbci	r25, 0xFF	; 255
    2026:	08 95       	ret

00002028 <__udivmodsi4>:
    2028:	a1 e2       	ldi	r26, 0x21	; 33
    202a:	1a 2e       	mov	r1, r26
    202c:	aa 1b       	sub	r26, r26
    202e:	bb 1b       	sub	r27, r27
    2030:	fd 01       	movw	r30, r26
    2032:	0d c0       	rjmp	.+26     	; 0x204e <__udivmodsi4_ep>

00002034 <__udivmodsi4_loop>:
    2034:	aa 1f       	adc	r26, r26
    2036:	bb 1f       	adc	r27, r27
    2038:	ee 1f       	adc	r30, r30
    203a:	ff 1f       	adc	r31, r31
    203c:	a2 17       	cp	r26, r18
    203e:	b3 07       	cpc	r27, r19
    2040:	e4 07       	cpc	r30, r20
    2042:	f5 07       	cpc	r31, r21
    2044:	20 f0       	brcs	.+8      	; 0x204e <__udivmodsi4_ep>
    2046:	a2 1b       	sub	r26, r18
    2048:	b3 0b       	sbc	r27, r19
    204a:	e4 0b       	sbc	r30, r20
    204c:	f5 0b       	sbc	r31, r21

0000204e <__udivmodsi4_ep>:
    204e:	66 1f       	adc	r22, r22
    2050:	77 1f       	adc	r23, r23
    2052:	88 1f       	adc	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	1a 94       	dec	r1
    2058:	69 f7       	brne	.-38     	; 0x2034 <__udivmodsi4_loop>
    205a:	60 95       	com	r22
    205c:	70 95       	com	r23
    205e:	80 95       	com	r24
    2060:	90 95       	com	r25
    2062:	9b 01       	movw	r18, r22
    2064:	ac 01       	movw	r20, r24
    2066:	bd 01       	movw	r22, r26
    2068:	cf 01       	movw	r24, r30
    206a:	08 95       	ret

0000206c <__itoa_ncheck>:
    206c:	bb 27       	eor	r27, r27
    206e:	4a 30       	cpi	r20, 0x0A	; 10
    2070:	31 f4       	brne	.+12     	; 0x207e <__itoa_ncheck+0x12>
    2072:	99 23       	and	r25, r25
    2074:	22 f4       	brpl	.+8      	; 0x207e <__itoa_ncheck+0x12>
    2076:	bd e2       	ldi	r27, 0x2D	; 45
    2078:	90 95       	com	r25
    207a:	81 95       	neg	r24
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	01 c0       	rjmp	.+2      	; 0x2082 <__utoa_common>

00002080 <__utoa_ncheck>:
    2080:	bb 27       	eor	r27, r27

00002082 <__utoa_common>:
    2082:	fb 01       	movw	r30, r22
    2084:	55 27       	eor	r21, r21
    2086:	aa 27       	eor	r26, r26
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	aa 1f       	adc	r26, r26
    208e:	a4 17       	cp	r26, r20
    2090:	10 f0       	brcs	.+4      	; 0x2096 <__utoa_common+0x14>
    2092:	a4 1b       	sub	r26, r20
    2094:	83 95       	inc	r24
    2096:	50 51       	subi	r21, 0x10	; 16
    2098:	b9 f7       	brne	.-18     	; 0x2088 <__utoa_common+0x6>
    209a:	a0 5d       	subi	r26, 0xD0	; 208
    209c:	aa 33       	cpi	r26, 0x3A	; 58
    209e:	08 f0       	brcs	.+2      	; 0x20a2 <__utoa_common+0x20>
    20a0:	a9 5d       	subi	r26, 0xD9	; 217
    20a2:	a1 93       	st	Z+, r26
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	79 f7       	brne	.-34     	; 0x2086 <__utoa_common+0x4>
    20a8:	b1 11       	cpse	r27, r1
    20aa:	b1 93       	st	Z+, r27
    20ac:	11 92       	st	Z+, r1
    20ae:	cb 01       	movw	r24, r22
    20b0:	00 c0       	rjmp	.+0      	; 0x20b2 <strrev>

000020b2 <strrev>:
    20b2:	dc 01       	movw	r26, r24
    20b4:	fc 01       	movw	r30, r24
    20b6:	67 2f       	mov	r22, r23
    20b8:	71 91       	ld	r23, Z+
    20ba:	77 23       	and	r23, r23
    20bc:	e1 f7       	brne	.-8      	; 0x20b6 <strrev+0x4>
    20be:	32 97       	sbiw	r30, 0x02	; 2
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <strrev+0x18>
    20c2:	7c 91       	ld	r23, X
    20c4:	6d 93       	st	X+, r22
    20c6:	70 83       	st	Z, r23
    20c8:	62 91       	ld	r22, -Z
    20ca:	ae 17       	cp	r26, r30
    20cc:	bf 07       	cpc	r27, r31
    20ce:	c8 f3       	brcs	.-14     	; 0x20c2 <strrev+0x10>
    20d0:	08 95       	ret

000020d2 <_exit>:
    20d2:	f8 94       	cli

000020d4 <__stop_program>:
    20d4:	ff cf       	rjmp	.-2      	; 0x20d4 <__stop_program>
